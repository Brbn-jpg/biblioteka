{
  "stats": {
    "suites": 1,
    "tests": 14,
    "passes": 11,
    "pending": 0,
    "failures": 3,
    "start": "2025-05-02T13:40:08.558Z",
    "end": "2025-05-02T13:40:09.582Z",
    "duration": 1024,
    "testsRegistered": 14,
    "passPercent": 78.57142857142857,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "76ae3a0d-77b9-4cff-b1ec-84d362e41ecf",
      "title": "",
      "fullFile": "cypress/e2e/api_tests.cy.js",
      "file": "cypress/e2e/api_tests.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a6e55e29-1af0-4dca-b08b-35958e7cadba",
          "title": "API Contract Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should verify book API contract",
              "fullTitle": "API Contract Tests should verify book API contract",
              "timedOut": null,
              "duration": 262,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Testing the main books endpoint\ncy.request(\"/books\").then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.be.an(\"array\");\n  if (response.body.length > 0) {\n    const book = response.body[0];\n    // Check book data structure\n    expect(book).to.have.property(\"id\");\n    expect(book).to.have.property(\"name\");\n    expect(book).to.have.property(\"author\");\n    // Type validations\n    expect(book.id).to.be.a(\"number\");\n    expect(book.name).to.be.a(\"string\");\n    expect(book.author).to.be.an(\"object\");\n    // Check for author_id in book's author object\n    expect(book.author).to.have.property(\"author_id\");\n  }\n});\n// Testing the book details endpoint\ncy.request(\"/books/1/details\").then(response => {\n  expect(response.status).to.eq(200);\n  const bookDetails = response.body;\n  // Check book details structure - this matches your BookDTO\n  expect(bookDetails).to.have.property(\"id\");\n  expect(bookDetails).to.have.property(\"name\");\n  expect(bookDetails).to.have.property(\"author\");\n  // Check author structure in book details - this matches your AuthorDTO inside BookDTO\n  expect(bookDetails.author).to.have.property(\"id\"); // This is correct as your AuthorDTO uses 'id'\n  expect(bookDetails.author).to.have.property(\"firstName\");\n  expect(bookDetails.author).to.have.property(\"lastName\");\n});",
              "err": {
                "message": "CypressError: `cy.request()` failed on:\n\nhttp://localhost:8080/books/1/details\n\nThe response we received from your web server was:\n\n  > 404: Not Found\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: GET\nURL: http://localhost:8080/books/1/details\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/14.3.2 Chrome/130.0.6723.137 Electron/33.2.1 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\"\n}\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 404 - Not Found\nHeaders: {\n  \"vary\": \"Origin, Access-Control-Request-Method, Access-Control-Request-Headers\",\n  \"content-length\": \"0\",\n  \"date\": \"Fri, 02 May 2025 13:40:08 GMT\",\n  \"keep-alive\": \"timeout=60\",\n  \"connection\": \"keep-alive\"\n}\nBody: \n\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` failed on:\n\nhttp://localhost:8080/books/1/details\n\nThe response we received from your web server was:\n\n  > 404: Not Found\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: GET\nURL: http://localhost:8080/books/1/details\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/14.3.2 Chrome/130.0.6723.137 Electron/33.2.1 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\"\n}\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 404 - Not Found\nHeaders: {\n  \"vary\": \"Origin, Access-Control-Request-Method, Access-Control-Request-Headers\",\n  \"content-length\": \"0\",\n  \"date\": \"Fri, 02 May 2025 13:40:08 GMT\",\n  \"keep-alive\": \"timeout=60\",\n  \"connection\": \"keep-alive\"\n}\nBody: \n\n\nhttps://on.cypress.io/request\n    at <unknown> (http://localhost:8080/__cypress/runner/cypress_runner.js:134979:72)\n    at tryCatcher (http://localhost:8080/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise._settlePromiseFromHandler (http://localhost:8080/__cypress/runner/cypress_runner.js:1489:31)\n    at Promise._settlePromise (http://localhost:8080/__cypress/runner/cypress_runner.js:1546:18)\n    at Promise._settlePromise0 (http://localhost:8080/__cypress/runner/cypress_runner.js:1591:10)\n    at Promise._settlePromises (http://localhost:8080/__cypress/runner/cypress_runner.js:1671:18)\n    at _drainQueueStep (http://localhost:8080/__cypress/runner/cypress_runner.js:2377:12)\n    at _drainQueue (http://localhost:8080/__cypress/runner/cypress_runner.js:2370:9)\n    at Async._drainQueues (http://localhost:8080/__cypress/runner/cypress_runner.js:2386:5)\n    at Async.drainQueues (http://localhost:8080/__cypress/runner/cypress_runner.js:2256:14)\nFrom Your Spec Code:\n    at Context.eval (webpack:///./cypress/e2e/api_tests.cy.js:34:8)\n    at getRet (http://localhost:8080/__cypress/runner/cypress_runner.js:119616:20)\n    at tryCatcher (http://localhost:8080/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (http://localhost:8080/__cypress/runner/cypress_runner.js:4285:29)\n    at Context.thenFn (http://localhost:8080/__cypress/runner/cypress_runner.js:119627:66)\n    at Context.then (http://localhost:8080/__cypress/runner/cypress_runner.js:119878:21)\n    at wrapped (http://localhost:8080/__cypress/runner/cypress_runner.js:140155:19)",
                "diff": null
              },
              "uuid": "6aa10a93-c711-40b5-9187-3039f257229c",
              "parentUUID": "a6e55e29-1af0-4dca-b08b-35958e7cadba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify author API contract",
              "fullTitle": "API Contract Tests should verify author API contract",
              "timedOut": null,
              "duration": 191,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Testing the main authors endpoint\ncy.request(\"/author\").then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.be.an(\"array\");\n  if (response.body.length > 0) {\n    const author = response.body[0];\n    // Check author data structure\n    expect(author).to.have.property(\"author_id\"); // This matches your Author model\n    expect(author).to.have.property(\"firstName\");\n    expect(author).to.have.property(\"lastName\");\n    expect(author).to.have.property(\"books\");\n    // Type validations\n    expect(author.author_id).to.be.a(\"number\");\n    expect(author.firstName).to.be.a(\"string\");\n    expect(author.lastName).to.be.a(\"string\");\n    expect(author.books).to.be.an(\"array\");\n  }\n});\n// Testing the author details endpoint\ncy.request(\"/author/1/details\").then(response => {\n  expect(response.status).to.eq(200);\n  const authorDetails = response.body;\n  // Check author details structure - this matches your AuthorDTO\n  expect(authorDetails).to.have.property(\"id\"); // Correct - your AuthorDTO uses 'id'\n  expect(authorDetails).to.have.property(\"firstName\");\n  expect(authorDetails).to.have.property(\"lastName\");\n  expect(authorDetails).to.have.property(\"books\");\n  // Check books array\n  expect(authorDetails.books).to.be.an(\"array\");\n  if (authorDetails.books.length > 0) {\n    const book = authorDetails.books[0];\n    // Check book structure in author details\n    expect(book).to.have.property(\"id\");\n    expect(book).to.have.property(\"name\");\n  }\n});",
              "err": {
                "message": "AssertionError: expected { Object (author_id, firstName, ...) } to have property 'books'",
                "estack": "AssertionError: expected { Object (author_id, firstName, ...) } to have property 'books'\n    at Context.eval (webpack:///./cypress/e2e/api_tests.cy.js:67:31)\n    at getRet (http://localhost:8080/__cypress/runner/cypress_runner.js:119616:20)\n    at tryCatcher (http://localhost:8080/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (http://localhost:8080/__cypress/runner/cypress_runner.js:4285:29)\n    at Context.thenFn (http://localhost:8080/__cypress/runner/cypress_runner.js:119627:66)\n    at Context.then (http://localhost:8080/__cypress/runner/cypress_runner.js:119878:21)",
                "diff": null
              },
              "uuid": "d5031abd-7583-44e7-b152-47cbf2526492",
              "parentUUID": "a6e55e29-1af0-4dca-b08b-35958e7cadba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test book addition API contract",
              "fullTitle": "API Contract Tests should test book addition API contract",
              "timedOut": null,
              "duration": 160,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const newBook = {\n  name: \"Nowa książka testowa\",\n  author_id: \"1\" // String, as expected by your controller\n};\ncy.request({\n  method: \"POST\",\n  url: \"/books/addBook\",\n  body: newBook\n}).then(response => {\n  expect(response.status).to.eq(200);\n  // Check response structure after adding a book - this matches your BookDTO response\n  expect(response.body).to.have.property(\"id\");\n  expect(response.body).to.have.property(\"name\");\n  expect(response.body).to.have.property(\"author\");\n  expect(response.body.name).to.eq(newBook.name);\n  // The author should have id, firstName and lastName\n  expect(response.body.author).to.have.property(\"id\");\n  expect(response.body.author).to.have.property(\"firstName\");\n  expect(response.body.author).to.have.property(\"lastName\");\n});",
              "err": {
                "message": "CypressError: `cy.request()` failed on:\n\nhttp://localhost:8080/books/addBook\n\nThe response we received from your web server was:\n\n  > 404: Not Found\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: POST\nURL: http://localhost:8080/books/addBook\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/14.3.2 Chrome/130.0.6723.137 Electron/33.2.1 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\",\n  \"content-type\": \"application/json\",\n  \"content-length\": 49\n}\nBody: {\"name\":\"Nowa książka testowa\",\"author_id\":\"1\"}\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 404 - Not Found\nHeaders: {\n  \"vary\": \"Origin, Access-Control-Request-Method, Access-Control-Request-Headers\",\n  \"content-length\": \"0\",\n  \"date\": \"Fri, 02 May 2025 13:40:09 GMT\",\n  \"keep-alive\": \"timeout=60\",\n  \"connection\": \"keep-alive\"\n}\n\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` failed on:\n\nhttp://localhost:8080/books/addBook\n\nThe response we received from your web server was:\n\n  > 404: Not Found\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: POST\nURL: http://localhost:8080/books/addBook\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/14.3.2 Chrome/130.0.6723.137 Electron/33.2.1 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\",\n  \"content-type\": \"application/json\",\n  \"content-length\": 49\n}\nBody: {\"name\":\"Nowa książka testowa\",\"author_id\":\"1\"}\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 404 - Not Found\nHeaders: {\n  \"vary\": \"Origin, Access-Control-Request-Method, Access-Control-Request-Headers\",\n  \"content-length\": \"0\",\n  \"date\": \"Fri, 02 May 2025 13:40:09 GMT\",\n  \"keep-alive\": \"timeout=60\",\n  \"connection\": \"keep-alive\"\n}\n\n\nhttps://on.cypress.io/request\n    at <unknown> (http://localhost:8080/__cypress/runner/cypress_runner.js:134979:72)\n    at tryCatcher (http://localhost:8080/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise._settlePromiseFromHandler (http://localhost:8080/__cypress/runner/cypress_runner.js:1489:31)\n    at Promise._settlePromise (http://localhost:8080/__cypress/runner/cypress_runner.js:1546:18)\n    at Promise._settlePromise0 (http://localhost:8080/__cypress/runner/cypress_runner.js:1591:10)\n    at Promise._settlePromises (http://localhost:8080/__cypress/runner/cypress_runner.js:1671:18)\n    at _drainQueueStep (http://localhost:8080/__cypress/runner/cypress_runner.js:2377:12)\n    at _drainQueue (http://localhost:8080/__cypress/runner/cypress_runner.js:2370:9)\n    at Async._drainQueues (http://localhost:8080/__cypress/runner/cypress_runner.js:2386:5)\n    at Async.drainQueues (http://localhost:8080/__cypress/runner/cypress_runner.js:2256:14)\nFrom Your Spec Code:\n    at Context.eval (webpack:///./cypress/e2e/api_tests.cy.js:105:7)",
                "diff": null
              },
              "uuid": "7d2f4e29-2f64-4718-a531-d34c571d3a6b",
              "parentUUID": "a6e55e29-1af0-4dca-b08b-35958e7cadba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test author addition API contract",
              "fullTitle": "API Contract Tests should test author addition API contract",
              "timedOut": null,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newAuthor = {\n  firstName: \"Nowy\",\n  lastName: \"Autor\"\n};\ncy.request({\n  method: \"POST\",\n  url: \"/author/addAuthor\",\n  body: newAuthor\n}).then(response => {\n  expect(response.status).to.eq(200);\n  // Check response structure after adding an author\n  expect(response.body).to.have.property(\"author_id\"); // Author model uses author_id\n  expect(response.body).to.have.property(\"firstName\");\n  expect(response.body).to.have.property(\"lastName\");\n  expect(response.body.firstName).to.eq(newAuthor.firstName);\n  expect(response.body.lastName).to.eq(newAuthor.lastName);\n});",
              "err": {},
              "uuid": "13e04bef-1668-419a-b683-130ee683f835",
              "parentUUID": "a6e55e29-1af0-4dca-b08b-35958e7cadba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test book update API contract",
              "fullTitle": "API Contract Tests should test book update API contract",
              "timedOut": null,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const bookUpdate = {\n  name: \"Zaktualizowana książka\",\n  author: {\n    author_id: 1 // This matches your controller's expectations\n  }\n};\ncy.request({\n  method: \"PUT\",\n  url: \"/books/updateBook/1\",\n  body: bookUpdate,\n  failOnStatusCode: false\n}).then(response => {\n  if (response.status === 200) {\n    // Check response structure after updating a book\n    expect(response.body).to.have.property(\"id\");\n    expect(response.body).to.have.property(\"name\");\n    expect(response.body).to.have.property(\"author\");\n    expect(response.body.name).to.eq(bookUpdate.name);\n    // The author should have author_id\n    expect(response.body.author).to.have.property(\"author_id\");\n  } else {\n    // Handle possible 404 if book doesn't exist\n    expect(response.status).to.be.oneOf([200, 404]);\n  }\n});",
              "err": {},
              "uuid": "827c9335-7fce-4268-9747-62580abafdbf",
              "parentUUID": "a6e55e29-1af0-4dca-b08b-35958e7cadba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test author update API contract",
              "fullTitle": "API Contract Tests should test author update API contract",
              "timedOut": null,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const authorUpdate = {\n  firstName: \"Zaktualizowane\",\n  lastName: \"Nazwisko\"\n};\ncy.request({\n  method: \"PUT\",\n  url: \"/author/updateAuthor/1\",\n  body: authorUpdate,\n  failOnStatusCode: false\n}).then(response => {\n  if (response.status === 200) {\n    // Check response structure after updating an author\n    expect(response.body).to.have.property(\"author_id\");\n    expect(response.body).to.have.property(\"firstName\");\n    expect(response.body).to.have.property(\"lastName\");\n    expect(response.body.firstName).to.eq(authorUpdate.firstName);\n    expect(response.body.lastName).to.eq(authorUpdate.lastName);\n  } else {\n    // Handle possible error responses\n    expect(response.status).to.be.oneOf([200, 404, 500]);\n  }\n});",
              "err": {},
              "uuid": "31b5f1d1-d9cb-4682-9053-3ad3677d250c",
              "parentUUID": "a6e55e29-1af0-4dca-b08b-35958e7cadba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test book deletion API contract",
              "fullTitle": "API Contract Tests should test book deletion API contract",
              "timedOut": null,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"DELETE\",\n  url: \"/books/deleteBook/1\",\n  failOnStatusCode: false\n}).then(response => {\n  // Should be 204 No Content if successful\n  expect(response.status).to.be.oneOf([204, 404, 500]);\n});",
              "err": {},
              "uuid": "df4f257f-a586-4f98-8166-e58632a79f9f",
              "parentUUID": "a6e55e29-1af0-4dca-b08b-35958e7cadba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test author deletion API contract",
              "fullTitle": "API Contract Tests should test author deletion API contract",
              "timedOut": null,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"DELETE\",\n  url: \"/author/deleteAuthor/1\",\n  failOnStatusCode: false\n}).then(response => {\n  // Should be 204 No Content if successful\n  expect(response.status).to.be.oneOf([204, 404, 500]);\n});",
              "err": {},
              "uuid": "80e02153-78d2-4b5f-98ae-60b65ace43be",
              "parentUUID": "a6e55e29-1af0-4dca-b08b-35958e7cadba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test error handling for non-existent book",
              "fullTitle": "API Contract Tests should test error handling for non-existent book",
              "timedOut": null,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: \"/books/999\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(404);\n});",
              "err": {},
              "uuid": "ced0b513-15f3-453e-935b-be142e3938d3",
              "parentUUID": "a6e55e29-1af0-4dca-b08b-35958e7cadba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test error handling for book details of non-existent book",
              "fullTitle": "API Contract Tests should test error handling for book details of non-existent book",
              "timedOut": null,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: \"/books/999/details\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(404);\n});",
              "err": {},
              "uuid": "1da0d152-da5a-45be-a858-ad086617272a",
              "parentUUID": "a6e55e29-1af0-4dca-b08b-35958e7cadba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test error handling for non-existent author",
              "fullTitle": "API Contract Tests should test error handling for non-existent author",
              "timedOut": null,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: \"/author/999\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(404);\n});",
              "err": {},
              "uuid": "c4171ba0-ef67-4c5e-843b-4dcd54099459",
              "parentUUID": "a6e55e29-1af0-4dca-b08b-35958e7cadba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test error handling for author details of non-existent author",
              "fullTitle": "API Contract Tests should test error handling for author details of non-existent author",
              "timedOut": null,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: \"/author/999/details\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(404);\n});",
              "err": {},
              "uuid": "74f35b45-1ca4-485a-98e5-28dc6d9555b3",
              "parentUUID": "a6e55e29-1af0-4dca-b08b-35958e7cadba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test the single book retrieval endpoint",
              "fullTitle": "API Contract Tests should test the single book retrieval endpoint",
              "timedOut": null,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: \"/books/1\",\n  failOnStatusCode: false\n}).then(response => {\n  if (response.status === 200) {\n    // The structure is Optional<Book> wrapped in ResponseEntity\n    expect(response.body).to.have.property(\"present\");\n    if (response.body.present) {\n      expect(response.body).to.have.property(\"value\");\n      const book = response.body.value;\n      expect(book).to.have.property(\"id\");\n      expect(book).to.have.property(\"name\");\n      expect(book).to.have.property(\"author\");\n      expect(book.author).to.have.property(\"author_id\");\n    }\n  } else {\n    expect(response.status).to.eq(404);\n  }\n});",
              "err": {},
              "uuid": "368fb47c-f6b3-44b1-b59a-20930e03d5f1",
              "parentUUID": "a6e55e29-1af0-4dca-b08b-35958e7cadba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test the single author retrieval endpoint",
              "fullTitle": "API Contract Tests should test the single author retrieval endpoint",
              "timedOut": null,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: \"/author/1\",\n  failOnStatusCode: false\n}).then(response => {\n  if (response.status === 200) {\n    // The structure is Optional<Author> wrapped in ResponseEntity\n    expect(response.body).to.have.property(\"present\");\n    if (response.body.present) {\n      expect(response.body).to.have.property(\"value\");\n      const author = response.body.value;\n      expect(author).to.have.property(\"author_id\");\n      expect(author).to.have.property(\"firstName\");\n      expect(author).to.have.property(\"lastName\");\n      expect(author).to.have.property(\"books\");\n    }\n  } else {\n    expect(response.status).to.eq(404);\n  }\n});",
              "err": {},
              "uuid": "11233f68-d7a2-4969-a11e-8fdc1d2b0b02",
              "parentUUID": "a6e55e29-1af0-4dca-b08b-35958e7cadba",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "13e04bef-1668-419a-b683-130ee683f835",
            "827c9335-7fce-4268-9747-62580abafdbf",
            "31b5f1d1-d9cb-4682-9053-3ad3677d250c",
            "df4f257f-a586-4f98-8166-e58632a79f9f",
            "80e02153-78d2-4b5f-98ae-60b65ace43be",
            "ced0b513-15f3-453e-935b-be142e3938d3",
            "1da0d152-da5a-45be-a858-ad086617272a",
            "c4171ba0-ef67-4c5e-843b-4dcd54099459",
            "74f35b45-1ca4-485a-98e5-28dc6d9555b3",
            "368fb47c-f6b3-44b1-b59a-20930e03d5f1",
            "11233f68-d7a2-4969-a11e-8fdc1d2b0b02"
          ],
          "failures": [
            "6aa10a93-c711-40b5-9187-3039f257229c",
            "d5031abd-7583-44e7-b152-47cbf2526492",
            "7d2f4e29-2f64-4718-a531-d34c571d3a6b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 877,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/.jsons",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}