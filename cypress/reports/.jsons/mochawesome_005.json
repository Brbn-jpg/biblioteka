{
  "stats": {
    "suites": 4,
    "tests": 26,
    "passes": 24,
    "pending": 0,
    "failures": 2,
    "start": "2025-05-02T12:34:44.285Z",
    "end": "2025-05-02T12:34:49.516Z",
    "duration": 5231,
    "testsRegistered": 26,
    "passPercent": 92.3076923076923,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a0c814af-9071-4a3e-9d35-1747ccdd3109",
      "title": "",
      "fullFile": "cypress/e2e/library_tests.cy.js",
      "file": "cypress/e2e/library_tests.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "11a4d14f-cf87-478b-9b5d-98e9be38734e",
          "title": "Library Management System",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should load the landing page",
              "fullTitle": "Library Management System should load the landing page",
              "timedOut": null,
              "duration": 273,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/landingPage.html\");\ncy.get(\"h1\").should(\"contain\", \"Strona startowa do Spring Boot REST Api\");\ncy.get(\"h2\").should(\"contain\", \"System biblioteczny\");\ncy.get(\".funkcje\").should(\"be.visible\");",
              "err": {},
              "uuid": "9c8a0753-1397-4a5b-b9b3-f592ff5b9341",
              "parentUUID": "11a4d14f-cf87-478b-9b5d-98e9be38734e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should navigate between pages",
              "fullTitle": "Library Management System should navigate between pages",
              "timedOut": null,
              "duration": 298,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/landingPage.html\");\n// Navigate to books page\ncy.get('a[href=\"ksiazki.html\"]').click();\ncy.url().should(\"include\", \"/ksiazki.html\");\ncy.get(\"h1\").should(\"contain\", \"Wszystkie Książki\");\n// Navigate to authors page\ncy.get('a[href=\"autorzy.html\"]').click();\ncy.url().should(\"include\", \"/autorzy.html\");\ncy.get(\"h1\").should(\"contain\", \"Wszyscy autorzy\");\n// Navigate back to landing page\ncy.get(\".start-page\").click();\ncy.url().should(\"include\", \"/landingPage.html\");",
              "err": {},
              "uuid": "422d5599-da3a-4dcb-a5d2-9b1188784cf2",
              "parentUUID": "11a4d14f-cf87-478b-9b5d-98e9be38734e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "bf07951c-8f96-4984-b81f-dbed8ec64e31",
              "title": "Book Management",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should load books page with table",
                  "fullTitle": "Library Management System Book Management should load books page with table",
                  "timedOut": null,
                  "duration": 71,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/ksiazki.html\");\ncy.get(\".output-table\").should(\"be.visible\");\ncy.get(\"thead\").should(\"contain\", \"Tytuł\");\ncy.get(\"thead\").should(\"contain\", \"Id ksiązki\");",
                  "err": {},
                  "uuid": "6715590b-122d-41e6-a9c4-341060e9cde7",
                  "parentUUID": "bf07951c-8f96-4984-b81f-dbed8ec64e31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should verify book API endpoint works",
                  "fullTitle": "Library Management System Book Management should verify book API endpoint works",
                  "timedOut": null,
                  "duration": 56,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// This test validates the actual endpoint exists and returns data\ncy.request({\n  url: \"/books\",\n  failOnStatusCode: false // Don't fail test if status code is not 2xx\n}).then(response => {\n  // Test should pass if status is 2xx (API endpoint works)\n  // Or fail otherwise (API endpoint changed or doesn't work)\n  expect(response.status).to.be.oneOf([200, 201, 202, 203, 204]);\n});",
                  "err": {},
                  "uuid": "4ef8d8a9-8a1c-46b0-82cb-f440f7bb1083",
                  "parentUUID": "bf07951c-8f96-4984-b81f-dbed8ec64e31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should load book details page",
                  "fullTitle": "Library Management System Book Management should load book details page",
                  "timedOut": null,
                  "duration": 68,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/ksiazkiDetailed.html\");\ncy.get(\"select.book-id\").should(\"be.visible\");\ncy.get(\"button.check\").should(\"be.visible\");\ncy.get(\".output-table\").should(\"be.visible\");",
                  "err": {},
                  "uuid": "c5ec16a8-9399-41cb-84f2-4c8bff4aec86",
                  "parentUUID": "bf07951c-8f96-4984-b81f-dbed8ec64e31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should verify book details API endpoint works",
                  "fullTitle": "Library Management System Book Management should verify book details API endpoint works",
                  "timedOut": null,
                  "duration": 75,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Make sure we have at least one book in the system\ncy.request(\"/books\").then(response => {\n  if (response.body && response.body.length > 0) {\n    const bookId = response.body[0].id;\n    // Test book details endpoint with the first book\n    cy.request({\n      url: `/books/${bookId}/details`,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.be.oneOf([200, 201, 202, 203, 204]);\n    });\n  } else {\n    // If no books, check with a default ID but expect it might not exist\n    cy.request({\n      url: \"/books/1/details\",\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.be.oneOf([200, 201, 202, 203, 204, 404]);\n    });\n  }\n});",
                  "err": {},
                  "uuid": "a0f4f3f5-a1b0-4938-b650-9bb3acad39aa",
                  "parentUUID": "bf07951c-8f96-4984-b81f-dbed8ec64e31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate add book form",
                  "fullTitle": "Library Management System Book Management should validate add book form",
                  "timedOut": null,
                  "duration": 245,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/dodajKsiazke.html\");\n// Wait for authors to load in the dropdown\ncy.intercept(\"/author\").as(\"loadAuthors\");\ncy.wait(\"@loadAuthors\", {\n  timeout: 10000\n});\n// Submit without required fields\ncy.get(\"button.Add\").click();\ncy.url().should(\"include\", \"/dodajKsiazke.html\");\n// Fill required fields and submit\ncy.get(\"input.title\").type(\"Test Book Title\");\n// Make sure we have at least one author to select\ncy.get(\"select.author-id option:not([disabled])\").should(\"have.length.at.least\", 1).then($options => {\n  // Select the first non-disabled option\n  const firstOptionValue = $options.first().val();\n  cy.get(\"select.author-id\").select(firstOptionValue);\n  // Submit the form\n  cy.get(\"button.Add\").click();\n  cy.get(\".added\").should(\"not.have.class\", \"invis\").and(\"contain\", \"Dodano ksiązkę\");\n});",
                  "err": {
                    "message": "SyntaxError: The following error originated from your application code, not from Cypress.\n\n  > Identifier 'apiURL' has already been declared\n\nWhen Cypress detects uncaught errors originating from your application it will automatically fail the current test.\n\nThis behavior is configurable, and you can choose to turn this off by listening to the `uncaught:exception` event.\n\nhttps://on.cypress.io/uncaught-exception-from-application",
                    "estack": "SyntaxError: The following error originated from your application code, not from Cypress.\n\n  > Identifier 'apiURL' has already been declared\n\nWhen Cypress detects uncaught errors originating from your application it will automatically fail the current test.\n\nThis behavior is configurable, and you can choose to turn this off by listening to the `uncaught:exception` event.\n\nhttps://on.cypress.io/uncaught-exception-from-application",
                    "diff": null
                  },
                  "uuid": "c36d0db2-bee5-44a2-bbcf-c0134d43c5a1",
                  "parentUUID": "bf07951c-8f96-4984-b81f-dbed8ec64e31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should verify add book API endpoint works",
                  "fullTitle": "Library Management System Book Management should verify add book API endpoint works",
                  "timedOut": null,
                  "duration": 61,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// First get an available author ID\ncy.request(\"/author\").then(response => {\n  if (response.body && response.body.length > 0) {\n    const authorId = response.body[0].author_id;\n    // Test the actual endpoint with a valid author ID\n    const payload = {\n      name: \"Test Book\",\n      author_id: authorId.toString()\n    };\n    cy.request({\n      method: \"POST\",\n      url: \"/books/addBook\",\n      body: payload,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.be.oneOf([200, 201, 202, 203, 204]);\n    });\n  } else {\n    // If no authors available, create one first\n    const authorPayload = {\n      firstName: \"Test\",\n      lastName: \"Author\"\n    };\n    cy.request({\n      method: \"POST\",\n      url: \"/author/addAuthor\",\n      body: authorPayload,\n      failOnStatusCode: false\n    }).then(authorResponse => {\n      if (authorResponse.status === 200 && authorResponse.body) {\n        const authorId = authorResponse.body.author_id;\n        // Now try to add a book with this author\n        const bookPayload = {\n          name: \"Test Book\",\n          author_id: authorId.toString()\n        };\n        cy.request({\n          method: \"POST\",\n          url: \"/books/addBook\",\n          body: bookPayload,\n          failOnStatusCode: false\n        }).then(response => {\n          expect(response.status).to.be.oneOf([200, 201, 202, 203, 204]);\n        });\n      }\n    });\n  }\n});",
                  "err": {},
                  "uuid": "1f77ce36-4d2e-4d5f-bf9b-149ea9c88d61",
                  "parentUUID": "bf07951c-8f96-4984-b81f-dbed8ec64e31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should test book update functionality",
                  "fullTitle": "Library Management System Book Management should test book update functionality",
                  "timedOut": null,
                  "duration": 903,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/zaktualizujKsiazke.html\");\n// Wait for books to load in the dropdown\ncy.intercept(\"/books\").as(\"loadBooks\");\ncy.wait(\"@loadBooks\", {\n  timeout: 10000\n});\n// Make sure we have at least one book to select\ncy.get(\"select.book-id option:not([disabled])\").should(\"have.length.at.least\", 1).then($options => {\n  // Select the first non-disabled option\n  const firstOptionValue = $options.first().val();\n  cy.get(\"select.book-id\").select(firstOptionValue);\n  // Fill in update fields\n  cy.get(\"input.title\").clear().type(\"Updated Book Title\");\n  cy.get(\"input.author-id\").clear().type(\"1\");\n  // Submit and check update message\n  cy.get('button[type=\"submit\"]').click();\n  cy.get(\".updated\").should(\"not.have.class\", \"invis\");\n});",
                  "err": {},
                  "uuid": "a23e1447-5969-438c-8614-efdb80b74e6b",
                  "parentUUID": "bf07951c-8f96-4984-b81f-dbed8ec64e31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should verify update book API endpoint works",
                  "fullTitle": "Library Management System Book Management should verify update book API endpoint works",
                  "timedOut": null,
                  "duration": 79,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Get a book to update\ncy.request(\"/books\").then(response => {\n  if (response.body && response.body.length > 0) {\n    const book = response.body[0];\n    const bookId = book.id;\n    // Get an author\n    cy.request(\"/author\").then(authorResponse => {\n      if (authorResponse.body && authorResponse.body.length > 0) {\n        const authorId = authorResponse.body[0].author_id;\n        // Test updating the book\n        const payload = {\n          name: \"Updated Book Title\",\n          author: {\n            author_id: authorId\n          }\n        };\n        cy.request({\n          method: \"PUT\",\n          url: `/books/updateBook/${bookId}`,\n          body: payload,\n          failOnStatusCode: false\n        }).then(response => {\n          expect(response.status).to.be.oneOf([200, 201, 202, 203, 204]);\n        });\n      }\n    });\n  } else {\n    // If no books available, skip this test or add a book first\n    cy.log(\"No books available to update - skipping test\");\n  }\n});",
                  "err": {},
                  "uuid": "16bf14ac-7121-48f2-98ff-febddc6d8265",
                  "parentUUID": "bf07951c-8f96-4984-b81f-dbed8ec64e31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should test book deletion",
                  "fullTitle": "Library Management System Book Management should test book deletion",
                  "timedOut": null,
                  "duration": 292,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/usunKsiazke.html\");\n// Wait for books to load in the dropdown\ncy.intercept(\"/books\").as(\"loadBooks\");\ncy.wait(\"@loadBooks\", {\n  timeout: 10000\n});\n// Make sure we have at least one book to select\ncy.get(\"select.book-id option:not([disabled])\").should(\"have.length.at.least\", 1).then($options => {\n  // Select the first non-disabled option\n  const firstOptionValue = $options.first().val();\n  cy.get(\"select.book-id\").select(firstOptionValue);\n  // Submit and check delete message\n  cy.get('button[type=\"submit\"]').click();\n  cy.get(\".deleted\").should(\"not.have.class\", \"invis\");\n});",
                  "err": {},
                  "uuid": "e7eb7f9d-5877-4645-b771-0bdedea0af30",
                  "parentUUID": "bf07951c-8f96-4984-b81f-dbed8ec64e31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should verify delete book API endpoint works",
                  "fullTitle": "Library Management System Book Management should verify delete book API endpoint works",
                  "timedOut": null,
                  "duration": 70,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// First create a book to delete\ncy.request(\"/author\").then(authorResponse => {\n  if (authorResponse.body && authorResponse.body.length > 0) {\n    const authorId = authorResponse.body[0].author_id;\n    // Create a book\n    const bookPayload = {\n      name: \"Book to Delete\",\n      author_id: authorId.toString()\n    };\n    cy.request({\n      method: \"POST\",\n      url: \"/books/addBook\",\n      body: bookPayload,\n      failOnStatusCode: false\n    }).then(createResponse => {\n      if (createResponse.status === 200 && createResponse.body && createResponse.body.id) {\n        // Then try to delete it\n        cy.request({\n          method: \"DELETE\",\n          url: `/books/deleteBook/${createResponse.body.id}`,\n          failOnStatusCode: false\n        }).then(deleteResponse => {\n          expect(deleteResponse.status).to.be.oneOf([200, 201, 202, 203, 204]);\n        });\n      } else {\n        // If we couldn't create a book, try finding an existing one to delete\n        cy.request(\"/books\").then(booksResponse => {\n          if (booksResponse.body && booksResponse.body.length > 0) {\n            const bookId = booksResponse.body[0].id;\n            cy.request({\n              method: \"DELETE\",\n              url: `/books/deleteBook/${bookId}`,\n              failOnStatusCode: false\n            }).then(deleteResponse => {\n              expect(deleteResponse.status).to.be.oneOf([200, 201, 202, 203, 204, 404]);\n            });\n          }\n        });\n      }\n    });\n  }\n});",
                  "err": {},
                  "uuid": "b73f9793-2e73-4578-aa74-4cf2d0bf981c",
                  "parentUUID": "bf07951c-8f96-4984-b81f-dbed8ec64e31",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6715590b-122d-41e6-a9c4-341060e9cde7",
                "4ef8d8a9-8a1c-46b0-82cb-f440f7bb1083",
                "c5ec16a8-9399-41cb-84f2-4c8bff4aec86",
                "a0f4f3f5-a1b0-4938-b650-9bb3acad39aa",
                "1f77ce36-4d2e-4d5f-bf9b-149ea9c88d61",
                "a23e1447-5969-438c-8614-efdb80b74e6b",
                "16bf14ac-7121-48f2-98ff-febddc6d8265",
                "e7eb7f9d-5877-4645-b771-0bdedea0af30",
                "b73f9793-2e73-4578-aa74-4cf2d0bf981c"
              ],
              "failures": [
                "c36d0db2-bee5-44a2-bbcf-c0134d43c5a1"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1920,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "54ac2e47-d094-4401-9274-9fe1ea11fbb7",
              "title": "Author Management",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should load authors page with table",
                  "fullTitle": "Library Management System Author Management should load authors page with table",
                  "timedOut": null,
                  "duration": 68,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/autorzy.html\");\ncy.get(\".output-table\").should(\"be.visible\");\ncy.get(\"thead\").should(\"contain\", \"Imie\");\ncy.get(\"thead\").should(\"contain\", \"Nazwisko\");\ncy.get(\"thead\").should(\"contain\", \"Id autora\");",
                  "err": {},
                  "uuid": "831463d3-1db0-4324-b611-655adb9f99df",
                  "parentUUID": "54ac2e47-d094-4401-9274-9fe1ea11fbb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should verify author API endpoint works",
                  "fullTitle": "Library Management System Author Management should verify author API endpoint works",
                  "timedOut": null,
                  "duration": 49,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// This test validates the actual endpoint exists and returns data\ncy.request({\n  url: \"/author\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.be.oneOf([200, 201, 202, 203, 204]);\n});",
                  "err": {},
                  "uuid": "3eb45461-f881-41c7-8614-64694779daea",
                  "parentUUID": "54ac2e47-d094-4401-9274-9fe1ea11fbb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should load author details page",
                  "fullTitle": "Library Management System Author Management should load author details page",
                  "timedOut": null,
                  "duration": 67,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/autorzyDetailed.html\");\ncy.get(\"select.author-id\").should(\"be.visible\");\ncy.get(\"button.check\").should(\"be.visible\");\ncy.get(\".output-table\").should(\"be.visible\");",
                  "err": {},
                  "uuid": "7c442a13-296d-403e-b89a-40c072c84da1",
                  "parentUUID": "54ac2e47-d094-4401-9274-9fe1ea11fbb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should verify author details API endpoint works",
                  "fullTitle": "Library Management System Author Management should verify author details API endpoint works",
                  "timedOut": null,
                  "duration": 58,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Make sure we have at least one author in the system\ncy.request(\"/author\").then(response => {\n  if (response.body && response.body.length > 0) {\n    const authorId = response.body[0].author_id;\n    // Test author details endpoint with the first author\n    cy.request({\n      url: `/author/${authorId}/details`,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.be.oneOf([200, 201, 202, 203, 204]);\n    });\n  } else {\n    // If no authors, check with a default ID but expect it might not exist\n    cy.request({\n      url: \"/author/1/details\",\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.be.oneOf([200, 201, 202, 203, 204, 404]);\n    });\n  }\n});",
                  "err": {},
                  "uuid": "c7721475-eac2-4ba0-8d4e-e997a034f24b",
                  "parentUUID": "54ac2e47-d094-4401-9274-9fe1ea11fbb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate add author form",
                  "fullTitle": "Library Management System Author Management should validate add author form",
                  "timedOut": null,
                  "duration": 502,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/dodajAutora.html\");\n// Submit without required fields\ncy.get(\"button.Add\").click();\ncy.url().should(\"include\", \"/dodajAutora.html\");\n// Fill required fields and submit\ncy.get(\"input.firstName\").type(\"Test\");\ncy.get(\"input.lastName\").type(\"Author\");\ncy.get(\"button.Add\").click();\ncy.get(\".added\").should(\"not.have.class\", \"invis\").and(\"contain\", \"Dodano autora\");",
                  "err": {},
                  "uuid": "769b3e5e-66f8-4ae5-98ea-fa133b6ad2e8",
                  "parentUUID": "54ac2e47-d094-4401-9274-9fe1ea11fbb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should verify add author API endpoint works",
                  "fullTitle": "Library Management System Author Management should verify add author API endpoint works",
                  "timedOut": null,
                  "duration": 46,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Test the actual endpoint with a sample payload\nconst payload = {\n  firstName: \"Test\",\n  lastName: \"Author\"\n};\ncy.request({\n  method: \"POST\",\n  url: \"/author/addAuthor\",\n  body: payload,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.be.oneOf([200, 201, 202, 203, 204]);\n});",
                  "err": {},
                  "uuid": "d19c08c9-0aef-4198-90aa-1b2a2dc95549",
                  "parentUUID": "54ac2e47-d094-4401-9274-9fe1ea11fbb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should test author update functionality",
                  "fullTitle": "Library Management System Author Management should test author update functionality",
                  "timedOut": null,
                  "duration": 873,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/zaktualizujAutora.html\");\n// Wait for authors to load in the dropdown\ncy.intercept(\"/author\").as(\"loadAuthors\");\ncy.wait(\"@loadAuthors\", {\n  timeout: 10000\n});\n// Make sure we have at least one author to select\ncy.get(\"select.author-id option:not([disabled])\").should(\"have.length.at.least\", 1).then($options => {\n  // Select the first non-disabled option\n  const firstOptionValue = $options.first().val();\n  cy.get(\"select.author-id\").select(firstOptionValue);\n  // Fill in update fields\n  cy.get(\"input.firstName\").clear().type(\"Updated\");\n  cy.get(\"input.lastName\").clear().type(\"AuthorName\");\n  // Submit and check update message\n  cy.get('button[type=\"submit\"]').click();\n  cy.get(\".updated\").should(\"not.have.class\", \"invis\");\n});",
                  "err": {},
                  "uuid": "6db1f7b2-868d-4de9-bcbc-adfc1328d190",
                  "parentUUID": "54ac2e47-d094-4401-9274-9fe1ea11fbb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should verify update author API endpoint works",
                  "fullTitle": "Library Management System Author Management should verify update author API endpoint works",
                  "timedOut": null,
                  "duration": 64,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Get an author to update\ncy.request(\"/author\").then(response => {\n  if (response.body && response.body.length > 0) {\n    const authorId = response.body[0].author_id;\n    // Test updating the author\n    const payload = {\n      firstName: \"Updated\",\n      lastName: \"AuthorName\"\n    };\n    cy.request({\n      method: \"PUT\",\n      url: `/author/updateAuthor/${authorId}`,\n      body: payload,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.be.oneOf([200, 201, 202, 203, 204]);\n    });\n  } else {\n    // If no authors available, skip this test or add an author first\n    cy.log(\"No authors available to update - skipping test\");\n  }\n});",
                  "err": {},
                  "uuid": "8aeee812-0c19-4e49-82cf-55a5f286fae9",
                  "parentUUID": "54ac2e47-d094-4401-9274-9fe1ea11fbb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should test author deletion",
                  "fullTitle": "Library Management System Author Management should test author deletion",
                  "timedOut": null,
                  "duration": 283,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/usunAutora.html\");\n// Wait for authors to load in the dropdown\ncy.intercept(\"/author\").as(\"loadAuthors\");\ncy.wait(\"@loadAuthors\", {\n  timeout: 10000\n});\n// Make sure we have at least one author to select\ncy.get(\"select.author-id option:not([disabled])\").should(\"have.length.at.least\", 1).then($options => {\n  // Select the first non-disabled option\n  const firstOptionValue = $options.first().val();\n  cy.get(\"select.author-id\").select(firstOptionValue);\n  // Submit and check delete message\n  cy.get('button[type=\"submit\"]').click();\n  cy.get(\".deleted\").should(\"not.have.class\", \"invis\");\n});",
                  "err": {},
                  "uuid": "fb41d2eb-6fc2-4b67-9264-fb680159c5b0",
                  "parentUUID": "54ac2e47-d094-4401-9274-9fe1ea11fbb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should verify delete author API endpoint works",
                  "fullTitle": "Library Management System Author Management should verify delete author API endpoint works",
                  "timedOut": null,
                  "duration": 65,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create an author to delete\nconst payload = {\n  firstName: \"Author\",\n  lastName: \"To Delete\"\n};\n// First create an author (that we can delete)\ncy.request({\n  method: \"POST\",\n  url: \"/author/addAuthor\",\n  body: payload,\n  failOnStatusCode: false\n}).then(createResponse => {\n  if (createResponse.status === 200 && createResponse.body && createResponse.body.author_id) {\n    // Then try to delete it\n    cy.request({\n      method: \"DELETE\",\n      url: `/author/deleteAuthor/${createResponse.body.author_id}`,\n      failOnStatusCode: false\n    }).then(deleteResponse => {\n      expect(deleteResponse.status).to.be.oneOf([200, 201, 202, 203, 204]);\n    });\n  } else {\n    // If we couldn't create, try finding an existing author to delete\n    cy.request(\"/author\").then(authorsResponse => {\n      if (authorsResponse.body && authorsResponse.body.length > 0) {\n        const authorId = authorsResponse.body[0].author_id;\n        cy.request({\n          method: \"DELETE\",\n          url: `/author/deleteAuthor/${authorId}`,\n          failOnStatusCode: false\n        }).then(deleteResponse => {\n          expect(deleteResponse.status).to.be.oneOf([200, 201, 202, 203, 204, 404]);\n        });\n      }\n    });\n  }\n});",
                  "err": {},
                  "uuid": "e8622a7f-f9f6-4d6e-8ca5-0992e2159b3f",
                  "parentUUID": "54ac2e47-d094-4401-9274-9fe1ea11fbb7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "831463d3-1db0-4324-b611-655adb9f99df",
                "3eb45461-f881-41c7-8614-64694779daea",
                "7c442a13-296d-403e-b89a-40c072c84da1",
                "c7721475-eac2-4ba0-8d4e-e997a034f24b",
                "769b3e5e-66f8-4ae5-98ea-fa133b6ad2e8",
                "d19c08c9-0aef-4198-90aa-1b2a2dc95549",
                "6db1f7b2-868d-4de9-bcbc-adfc1328d190",
                "8aeee812-0c19-4e49-82cf-55a5f286fae9",
                "fb41d2eb-6fc2-4b67-9264-fb680159c5b0",
                "e8622a7f-f9f6-4d6e-8ca5-0992e2159b3f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2075,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "09fdd30d-0bcb-4fb5-9eb8-7ef29adde155",
              "title": "API Contract Testing",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should verify Book object structure",
                  "fullTitle": "Library Management System API Contract Testing should verify Book object structure",
                  "timedOut": null,
                  "duration": 47,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  url: \"/books\",\n  failOnStatusCode: false\n}).then(response => {\n  if (response.status === 200 && response.body && response.body.length > 0) {\n    const book = response.body[0];\n    // Check required properties exist\n    expect(book).to.have.property(\"id\");\n    expect(book).to.have.property(\"name\");\n    expect(book).to.have.property(\"author\");\n  }\n});",
                  "err": {},
                  "uuid": "5fe5b30d-cd24-4eda-92e9-c31a6885a6c7",
                  "parentUUID": "09fdd30d-0bcb-4fb5-9eb8-7ef29adde155",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should verify BookDTO object structure",
                  "fullTitle": "Library Management System API Contract Testing should verify BookDTO object structure",
                  "timedOut": null,
                  "duration": 193,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// First get a valid book ID\ncy.request(\"/books\").then(booksResponse => {\n  if (booksResponse.body && booksResponse.body.length > 0) {\n    const bookId = booksResponse.body[0].id;\n    cy.request({\n      url: `/books/${bookId}/details`,\n      failOnStatusCode: false\n    }).then(response => {\n      if (response.status === 200 && response.body) {\n        // Check required properties exist on BookDTO\n        expect(response.body).to.have.property(\"id\");\n        expect(response.body).to.have.property(\"name\");\n        expect(response.body).to.have.property(\"author\");\n        // Check AuthorDTO properties\n        if (response.body.author) {\n          expect(response.body.author).to.have.property(\"id\");\n          expect(response.body.author).to.have.property(\"firstName\");\n          expect(response.body.author).to.have.property(\"lastName\");\n        }\n      }\n    });\n  } else {\n    cy.log(\"No books available to verify BookDTO structure - skipping test\");\n  }\n});",
                  "err": {
                    "message": "AssertionError: expected { Object (first_name, last_name, ...) } to have property 'id'",
                    "estack": "AssertionError: expected { Object (first_name, last_name, ...) } to have property 'id'\n    at Context.eval (webpack:///./cypress/e2e/library_tests.cy.js:572:53)\n    at getRet (http://localhost:8080/__cypress/runner/cypress_runner.js:119616:20)\n    at tryCatcher (http://localhost:8080/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (http://localhost:8080/__cypress/runner/cypress_runner.js:4285:29)\n    at Context.thenFn (http://localhost:8080/__cypress/runner/cypress_runner.js:119627:66)\n    at Context.then (http://localhost:8080/__cypress/runner/cypress_runner.js:119878:21)",
                    "diff": null
                  },
                  "uuid": "0cbfa982-5f10-475c-8070-dc4aab818dd1",
                  "parentUUID": "09fdd30d-0bcb-4fb5-9eb8-7ef29adde155",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should verify Author object structure",
                  "fullTitle": "Library Management System API Contract Testing should verify Author object structure",
                  "timedOut": null,
                  "duration": 52,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  url: \"/author\",\n  failOnStatusCode: false\n}).then(response => {\n  if (response.status === 200 && response.body && response.body.length > 0) {\n    const author = response.body[0];\n    // Check required properties exist\n    expect(author).to.have.property(\"author_id\");\n    expect(author).to.have.property(\"firstName\");\n    expect(author).to.have.property(\"lastName\");\n  }\n});",
                  "err": {},
                  "uuid": "2398abe3-9c3e-4148-9162-f68f54a56b8c",
                  "parentUUID": "09fdd30d-0bcb-4fb5-9eb8-7ef29adde155",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should verify AuthorDTO object structure",
                  "fullTitle": "Library Management System API Contract Testing should verify AuthorDTO object structure",
                  "timedOut": null,
                  "duration": 61,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// First get a valid author ID\ncy.request(\"/author\").then(authorsResponse => {\n  if (authorsResponse.body && authorsResponse.body.length > 0) {\n    const authorId = authorsResponse.body[0].author_id;\n    cy.request({\n      url: `/author/${authorId}/details`,\n      failOnStatusCode: false\n    }).then(response => {\n      if (response.status === 200 && response.body) {\n        // Check required properties exist\n        expect(response.body).to.have.property(\"id\");\n        expect(response.body).to.have.property(\"firstName\");\n        expect(response.body).to.have.property(\"lastName\");\n        expect(response.body).to.have.property(\"books\");\n      }\n    });\n  } else {\n    cy.log(\"No authors available to verify AuthorDTO structure - skipping test\");\n  }\n});",
                  "err": {},
                  "uuid": "d9fbf629-2896-464e-8f2b-06f6178efe6b",
                  "parentUUID": "09fdd30d-0bcb-4fb5-9eb8-7ef29adde155",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5fe5b30d-cd24-4eda-92e9-c31a6885a6c7",
                "2398abe3-9c3e-4148-9162-f68f54a56b8c",
                "d9fbf629-2896-464e-8f2b-06f6178efe6b"
              ],
              "failures": [
                "0cbfa982-5f10-475c-8070-dc4aab818dd1"
              ],
              "pending": [],
              "skipped": [],
              "duration": 353,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "9c8a0753-1397-4a5b-b9b3-f592ff5b9341",
            "422d5599-da3a-4dcb-a5d2-9b1188784cf2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 571,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/.jsons",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}