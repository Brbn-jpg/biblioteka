{
  "stats": {
    "suites": 5,
    "tests": 19,
    "passes": 9,
    "pending": 0,
    "failures": 10,
    "start": "2025-05-02T12:45:59.102Z",
    "end": "2025-05-02T12:46:23.010Z",
    "duration": 23908,
    "testsRegistered": 19,
    "passPercent": 47.368421052631575,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c723f0e8-6571-4858-a0d1-8b1f5af4c1c7",
      "title": "",
      "fullFile": "cypress/e2e/library_tests.cy.js",
      "file": "cypress/e2e/library_tests.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "162553c2-b8ed-41d9-a726-8f0874ef1bfa",
          "title": "Library Management System",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should load the landing page",
              "fullTitle": "Library Management System should load the landing page",
              "timedOut": null,
              "duration": 144,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/landingPage.html\");\ncy.get(\"h1\").should(\"contain\", \"Strona startowa do Spring Boot REST Api\");\ncy.get(\"h2\").should(\"contain\", \"System biblioteczny\");\ncy.get(\".funkcje\").should(\"be.visible\");",
              "err": {},
              "uuid": "e594501d-b742-4508-a710-ee4c238e0119",
              "parentUUID": "162553c2-b8ed-41d9-a726-8f0874ef1bfa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should navigate between pages",
              "fullTitle": "Library Management System should navigate between pages",
              "timedOut": null,
              "duration": 297,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/landingPage.html\");\n// Navigate to books page\ncy.get('a[href=\"ksiazki.html\"]').click();\ncy.url().should(\"include\", \"/ksiazki.html\");\ncy.get(\"h1\").should(\"contain\", \"Wszystkie Książki\");\n// Navigate to authors page\ncy.get('a[href=\"autorzy.html\"]').click();\ncy.url().should(\"include\", \"/autorzy.html\");\ncy.get(\"h1\").should(\"contain\", \"Wszyscy autorzy\");\n// Navigate back to landing page\ncy.get(\".start-page\").click();\ncy.url().should(\"include\", \"/landingPage.html\");",
              "err": {},
              "uuid": "6f8f3987-36e2-4cb0-9775-dec57e8ab2a5",
              "parentUUID": "162553c2-b8ed-41d9-a726-8f0874ef1bfa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "baf00f57-7694-4281-ab38-ca210f042c4a",
              "title": "Book Management",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should load books page with table",
                  "fullTitle": "Library Management System Book Management should load books page with table",
                  "timedOut": null,
                  "duration": 83,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/ksiazki.html\");\ncy.wait(\"@getBooks\").then(interception => {\n  // Sprawdzenie, czy request został poprawnie przechwycony\n  expect(interception.request.url).to.include(\"/books\");\n});\ncy.get(\".output-table\").should(\"be.visible\");\ncy.get(\"thead\").should(\"contain\", \"Tytuł\");\ncy.get(\"thead\").should(\"contain\", \"Id ksiązki\");",
                  "err": {},
                  "uuid": "9a094fd3-0213-4c85-9b7c-ca96292cb9b8",
                  "parentUUID": "baf00f57-7694-4281-ab38-ca210f042c4a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should load book details page",
                  "fullTitle": "Library Management System Book Management should load book details page",
                  "timedOut": null,
                  "duration": 5248,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/ksiazkiDetailed.html\");\ncy.get(\"select.book-id\").should(\"be.visible\");\ncy.get(\"button.check\").click();\n// Czekamy na wywołanie API gdy użytkownik kliknie przycisk \"check\"\ncy.wait(\"@getBookDetails\").then(interception => {\n  expect(interception.request.url).to.match(/\\/books\\/\\d+\\/details/);\n});\ncy.get(\".output-table\").should(\"be.visible\");",
                  "err": {
                    "message": "CypressError: Timed out retrying after 5000ms: `cy.wait()` timed out waiting `5000ms` for the 1st request to the route: `getBookDetails`. No request ever occurred.\n\nhttps://on.cypress.io/wait",
                    "estack": "CypressError: Timed out retrying after 5000ms: `cy.wait()` timed out waiting `5000ms` for the 1st request to the route: `getBookDetails`. No request ever occurred.\n\nhttps://on.cypress.io/wait\n    at cypressErr (http://localhost:8080/__cypress/runner/cypress_runner.js:76205:18)\n    at Object.errByPath (http://localhost:8080/__cypress/runner/cypress_runner.js:76259:10)\n    at checkForXhr (http://localhost:8080/__cypress/runner/cypress_runner.js:137446:84)\n    at <unknown> (http://localhost:8080/__cypress/runner/cypress_runner.js:137472:28)\n    at tryCatcher (http://localhost:8080/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (http://localhost:8080/__cypress/runner/cypress_runner.js:4285:29)\n    at whenStable (http://localhost:8080/__cypress/runner/cypress_runner.js:145828:68)\n    at <unknown> (http://localhost:8080/__cypress/runner/cypress_runner.js:145769:14)\n    at tryCatcher (http://localhost:8080/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise._settlePromiseFromHandler (http://localhost:8080/__cypress/runner/cypress_runner.js:1489:31)\n    at Promise._settlePromise (http://localhost:8080/__cypress/runner/cypress_runner.js:1546:18)\n    at Promise._settlePromise0 (http://localhost:8080/__cypress/runner/cypress_runner.js:1591:10)\n    at Promise._settlePromises (http://localhost:8080/__cypress/runner/cypress_runner.js:1671:18)\n    at Promise._fulfill (http://localhost:8080/__cypress/runner/cypress_runner.js:1615:18)\n    at <unknown> (http://localhost:8080/__cypress/runner/cypress_runner.js:5420:46)",
                    "diff": null
                  },
                  "uuid": "652a0f47-1d8e-438a-803d-61cafb6b3a8e",
                  "parentUUID": "baf00f57-7694-4281-ab38-ca210f042c4a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate add book form and send correct API request",
                  "fullTitle": "Library Management System Book Management should validate add book form and send correct API request",
                  "timedOut": null,
                  "duration": 198,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/dodajKsiazke.html\");\n// Submit without required fields\ncy.get(\"button.Add\").click();\ncy.url().should(\"include\", \"/dodajKsiazke.html\");\n// Fill required fields and submit\ncy.get(\"input.title\").type(\"Test Book Title\");\ncy.get(\"select.author-id\").select(1);\ncy.get(\"button.Add\").click();\n// Sprawdzenie, czy request został wysłany do poprawnego endpointu\ncy.wait(\"@addBook\").then(interception => {\n  expect(interception.request.url).to.include(\"/books/addBook\");\n  expect(interception.request.method).to.equal(\"POST\");\n  // Sprawdzenie, czy przesłane dane są zgodne z oczekiwaniami\n  expect(interception.request.body).to.have.property(\"name\", \"Test Book Title\");\n  expect(interception.request.body).to.have.property(\"author_id\");\n});\ncy.get(\".added\").should(\"not.have.class\", \"invis\").and(\"contain\", \"Dodano ksiązkę\");",
                  "err": {
                    "message": "SyntaxError: The following error originated from your application code, not from Cypress.\n\n  > Identifier 'apiURL' has already been declared\n\nWhen Cypress detects uncaught errors originating from your application it will automatically fail the current test.\n\nThis behavior is configurable, and you can choose to turn this off by listening to the `uncaught:exception` event.\n\nhttps://on.cypress.io/uncaught-exception-from-application",
                    "estack": "SyntaxError: The following error originated from your application code, not from Cypress.\n\n  > Identifier 'apiURL' has already been declared\n\nWhen Cypress detects uncaught errors originating from your application it will automatically fail the current test.\n\nThis behavior is configurable, and you can choose to turn this off by listening to the `uncaught:exception` event.\n\nhttps://on.cypress.io/uncaught-exception-from-application",
                    "diff": null
                  },
                  "uuid": "46675fd7-14ff-4a7d-8de8-a349ff0a84f4",
                  "parentUUID": "baf00f57-7694-4281-ab38-ca210f042c4a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should test book update functionality with correct API endpoint",
                  "fullTitle": "Library Management System Book Management should test book update functionality with correct API endpoint",
                  "timedOut": null,
                  "duration": 864,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/zaktualizujKsiazke.html\");\n// Select book and update fields\ncy.get(\"select.book-id\").select(1);\ncy.get(\"input.title\").type(\"Updated Book Title\");\ncy.get(\"input.author-id\").type(\"1\");\n// Submit and check update message\ncy.get('button[type=\"submit\"]').click();\n// Sprawdzenie czy request został wysłany do poprawnego endpointu\ncy.wait(\"@updateBook\").then(interception => {\n  expect(interception.request.url).to.match(/\\/books\\/updateBook\\/\\d+/);\n  expect(interception.request.method).to.equal(\"PUT\");\n  // Sprawdzenie, czy przesłane dane są zgodne z oczekiwaniami\n  expect(interception.request.body).to.have.property(\"name\", \"Updated Book Title\");\n});\ncy.get(\".updated\").should(\"not.have.class\", \"invis\");",
                  "err": {
                    "message": "AssertionError: expected { Object (name, author_id) } to have property 'name' of 'Updated Book Title', but got 'Przykładowa książka 1Updated Book Title'",
                    "estack": "AssertionError: expected { Object (name, author_id) } to have property 'name' of 'Updated Book Title', but got 'Przykładowa książka 1Updated Book Title'\n    at Context.eval (webpack:///./cypress/e2e/library_tests.cy.js:118:50)\n    at getRet (http://localhost:8080/__cypress/runner/cypress_runner.js:119616:20)\n    at tryCatcher (http://localhost:8080/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (http://localhost:8080/__cypress/runner/cypress_runner.js:4285:29)\n    at Context.thenFn (http://localhost:8080/__cypress/runner/cypress_runner.js:119627:66)\n    at Context.then (http://localhost:8080/__cypress/runner/cypress_runner.js:119878:21)",
                    "diff": "- 'Przykładowa książka 1Updated Book Title'\n+ 'Updated Book Title'\n"
                  },
                  "uuid": "a528e24b-01d7-4b22-a8c7-7e7b1eef743c",
                  "parentUUID": "baf00f57-7694-4281-ab38-ca210f042c4a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should test book deletion with correct API endpoint",
                  "fullTitle": "Library Management System Book Management should test book deletion with correct API endpoint",
                  "timedOut": null,
                  "duration": 279,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/usunKsiazke.html\");\n// Select book and delete\ncy.get(\"select.book-id\").select(1);\ncy.get('button[type=\"submit\"]').click();\n// Sprawdzenie czy request został wysłany do poprawnego endpointu\ncy.wait(\"@deleteBook\").then(interception => {\n  expect(interception.request.url).to.match(/\\/books\\/deleteBook\\/\\d+/);\n  expect(interception.request.method).to.equal(\"DELETE\");\n});\ncy.get(\".deleted\").should(\"not.have.class\", \"invis\");",
                  "err": {},
                  "uuid": "d11f7118-0714-43f7-b077-0b9ee6c6f4e8",
                  "parentUUID": "baf00f57-7694-4281-ab38-ca210f042c4a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9a094fd3-0213-4c85-9b7c-ca96292cb9b8",
                "d11f7118-0714-43f7-b077-0b9ee6c6f4e8"
              ],
              "failures": [
                "652a0f47-1d8e-438a-803d-61cafb6b3a8e",
                "46675fd7-14ff-4a7d-8de8-a349ff0a84f4",
                "a528e24b-01d7-4b22-a8c7-7e7b1eef743c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 6672,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "008fcb6d-130e-4a48-8b08-437f8b3560c4",
              "title": "Author Management",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should load authors page with table",
                  "fullTitle": "Library Management System Author Management should load authors page with table",
                  "timedOut": null,
                  "duration": 85,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/autorzy.html\");\ncy.wait(\"@getAuthors\").then(interception => {\n  // Sprawdzenie, czy request został poprawnie przechwycony\n  expect(interception.request.url).to.include(\"/author\");\n});\ncy.get(\".output-table\").should(\"be.visible\");\ncy.get(\"thead\").should(\"contain\", \"Imie\");\ncy.get(\"thead\").should(\"contain\", \"Nazwisko\");\ncy.get(\"thead\").should(\"contain\", \"Id autora\");",
                  "err": {},
                  "uuid": "c18bd77f-2859-43cc-ba89-eb6b8cb96410",
                  "parentUUID": "008fcb6d-130e-4a48-8b08-437f8b3560c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should load author details page",
                  "fullTitle": "Library Management System Author Management should load author details page",
                  "timedOut": null,
                  "duration": 5259,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/autorzyDetailed.html\");\ncy.get(\"select.author-id\").should(\"be.visible\");\ncy.get(\"button.check\").click();\n// Czekamy na wywołanie API gdy użytkownik kliknie przycisk \"check\"\ncy.wait(\"@getAuthorDetails\").then(interception => {\n  expect(interception.request.url).to.match(/\\/author\\/\\d+\\/details/);\n});\ncy.get(\".output-table\").should(\"be.visible\");",
                  "err": {
                    "message": "CypressError: Timed out retrying after 5000ms: `cy.wait()` timed out waiting `5000ms` for the 1st request to the route: `getAuthorDetails`. No request ever occurred.\n\nhttps://on.cypress.io/wait",
                    "estack": "CypressError: Timed out retrying after 5000ms: `cy.wait()` timed out waiting `5000ms` for the 1st request to the route: `getAuthorDetails`. No request ever occurred.\n\nhttps://on.cypress.io/wait\n    at cypressErr (http://localhost:8080/__cypress/runner/cypress_runner.js:76205:18)\n    at Object.errByPath (http://localhost:8080/__cypress/runner/cypress_runner.js:76259:10)\n    at checkForXhr (http://localhost:8080/__cypress/runner/cypress_runner.js:137446:84)\n    at <unknown> (http://localhost:8080/__cypress/runner/cypress_runner.js:137472:28)\n    at tryCatcher (http://localhost:8080/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (http://localhost:8080/__cypress/runner/cypress_runner.js:4285:29)\n    at whenStable (http://localhost:8080/__cypress/runner/cypress_runner.js:145828:68)\n    at <unknown> (http://localhost:8080/__cypress/runner/cypress_runner.js:145769:14)\n    at tryCatcher (http://localhost:8080/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise._settlePromiseFromHandler (http://localhost:8080/__cypress/runner/cypress_runner.js:1489:31)\n    at Promise._settlePromise (http://localhost:8080/__cypress/runner/cypress_runner.js:1546:18)\n    at Promise._settlePromise0 (http://localhost:8080/__cypress/runner/cypress_runner.js:1591:10)\n    at Promise._settlePromises (http://localhost:8080/__cypress/runner/cypress_runner.js:1671:18)\n    at Promise._fulfill (http://localhost:8080/__cypress/runner/cypress_runner.js:1615:18)\n    at <unknown> (http://localhost:8080/__cypress/runner/cypress_runner.js:5420:46)",
                    "diff": null
                  },
                  "uuid": "b6ae5761-7765-4c40-a70f-036163152c8f",
                  "parentUUID": "008fcb6d-130e-4a48-8b08-437f8b3560c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate add author form and send correct API request",
                  "fullTitle": "Library Management System Author Management should validate add author form and send correct API request",
                  "timedOut": null,
                  "duration": 4620,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/dodajAutora.html\");\n// Submit without required fields\ncy.get(\"button.Add\").click();\ncy.url().should(\"include\", \"/dodajAutora.html\");\n// Fill required fields and submit\ncy.get(\"input.firstName\").type(\"Test\");\ncy.get(\"input.lastName\").type(\"Author\");\ncy.get(\"button.Add\").click();\n// Sprawdzenie, czy request został wysłany do poprawnego endpointu\ncy.wait(\"@addAuthor\").then(interception => {\n  expect(interception.request.url).to.include(\"/author/addAuthor\");\n  expect(interception.request.method).to.equal(\"POST\");\n  // Sprawdzenie, czy przesłane dane są zgodne z oczekiwaniami\n  expect(interception.request.body).to.have.property(\"firstName\", \"Test\");\n  expect(interception.request.body).to.have.property(\"lastName\", \"Author\");\n});\ncy.get(\".added\").should(\"not.have.class\", \"invis\").and(\"contain\", \"Dodano autora\");",
                  "err": {
                    "message": "AssertionError: Timed out retrying after 4000ms: expected '<h3.added.invis>' not to have class 'invis'",
                    "estack": "AssertionError: Timed out retrying after 4000ms: expected '<h3.added.invis>' not to have class 'invis'\n    at Context.eval (webpack:///./cypress/e2e/library_tests.cy.js:193:9)",
                    "diff": null
                  },
                  "uuid": "f20353e2-0d25-47b8-a482-4f088c15231e",
                  "parentUUID": "008fcb6d-130e-4a48-8b08-437f8b3560c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should test author update functionality with correct API endpoint",
                  "fullTitle": "Library Management System Author Management should test author update functionality with correct API endpoint",
                  "timedOut": null,
                  "duration": 838,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/zaktualizujAutora.html\");\n// Select author and update fields\ncy.get(\"select.author-id\").select(1);\ncy.get(\"input.firstName\").type(\"Updated\");\ncy.get(\"input.lastName\").type(\"AuthorName\");\n// Submit and check update message\ncy.get('button[type=\"submit\"]').click();\n// Sprawdzenie czy request został wysłany do poprawnego endpointu\ncy.wait(\"@updateAuthor\").then(interception => {\n  expect(interception.request.url).to.match(/\\/author\\/updateAuthor\\/\\d+/);\n  expect(interception.request.method).to.equal(\"PUT\");\n  // Sprawdzenie, czy przesłane dane są zgodne z oczekiwaniami\n  expect(interception.request.body).to.have.property(\"firstName\", \"Updated\");\n  expect(interception.request.body).to.have.property(\"lastName\", \"AuthorName\");\n});\ncy.get(\".updated\").should(\"not.have.class\", \"invis\");",
                  "err": {
                    "message": "AssertionError: expected { Object (firstName, lastName, ...) } to have property 'firstName' of 'Updated', but got 'JanUpdated'",
                    "estack": "AssertionError: expected { Object (firstName, lastName, ...) } to have property 'firstName' of 'Updated', but got 'JanUpdated'\n    at Context.eval (webpack:///./cypress/e2e/library_tests.cy.js:215:50)\n    at getRet (http://localhost:8080/__cypress/runner/cypress_runner.js:119616:20)\n    at tryCatcher (http://localhost:8080/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (http://localhost:8080/__cypress/runner/cypress_runner.js:4285:29)\n    at Context.thenFn (http://localhost:8080/__cypress/runner/cypress_runner.js:119627:66)\n    at Context.then (http://localhost:8080/__cypress/runner/cypress_runner.js:119878:21)",
                    "diff": "- 'JanUpdated'\n+ 'Updated'\n"
                  },
                  "uuid": "10fe8e12-c60b-47b9-b0a2-2049e032fc93",
                  "parentUUID": "008fcb6d-130e-4a48-8b08-437f8b3560c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should test author deletion with correct API endpoint",
                  "fullTitle": "Library Management System Author Management should test author deletion with correct API endpoint",
                  "timedOut": null,
                  "duration": 292,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/usunAutora.html\");\n// Select author and delete\ncy.get(\"select.author-id\").select(1);\ncy.get('button[type=\"submit\"]').click();\n// Sprawdzenie czy request został wysłany do poprawnego endpointu\ncy.wait(\"@deleteAuthor\").then(interception => {\n  expect(interception.request.url).to.match(/\\/author\\/deleteAuthor\\/\\d+/);\n  expect(interception.request.method).to.equal(\"DELETE\");\n});\ncy.get(\".deleted\").should(\"not.have.class\", \"invis\");",
                  "err": {},
                  "uuid": "9c88c254-6db6-49ff-b66d-67a6c82601c2",
                  "parentUUID": "008fcb6d-130e-4a48-8b08-437f8b3560c4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c18bd77f-2859-43cc-ba89-eb6b8cb96410",
                "9c88c254-6db6-49ff-b66d-67a6c82601c2"
              ],
              "failures": [
                "b6ae5761-7765-4c40-a70f-036163152c8f",
                "f20353e2-0d25-47b8-a482-4f088c15231e",
                "10fe8e12-c60b-47b9-b0a2-2049e032fc93"
              ],
              "pending": [],
              "skipped": [],
              "duration": 11094,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e4c350e7-6dd6-472d-926a-f13a59dcdd5a",
              "title": "API Contract Validation",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate book response structure",
                  "fullTitle": "Library Management System API Contract Validation should validate book response structure",
                  "timedOut": null,
                  "duration": 78,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/ksiazki.html\");\ncy.wait(\"@getBooks\").then(interception => {\n  // Sprawdzanie struktury odpowiedzi API\n  expect(interception.response.body).to.be.an(\"array\");\n  if (interception.response.body.length > 0) {\n    const book = interception.response.body[0];\n    expect(book).to.have.property(\"id\");\n    expect(book).to.have.property(\"name\");\n    expect(book).to.have.property(\"author\");\n  }\n});",
                  "err": {},
                  "uuid": "ea086968-eb9f-459d-9994-d78d92464472",
                  "parentUUID": "e4c350e7-6dd6-472d-926a-f13a59dcdd5a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate author response structure",
                  "fullTitle": "Library Management System API Contract Validation should validate author response structure",
                  "timedOut": null,
                  "duration": 85,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/autorzy.html\");\ncy.wait(\"@getAuthors\").then(interception => {\n  // Sprawdzanie struktury odpowiedzi API\n  expect(interception.response.body).to.be.an(\"array\");\n  if (interception.response.body.length > 0) {\n    const author = interception.response.body[0];\n    expect(author).to.have.property(\"author_id\");\n    expect(author).to.have.property(\"firstName\");\n    expect(author).to.have.property(\"lastName\");\n    expect(author).to.have.property(\"books\");\n  }\n});",
                  "err": {},
                  "uuid": "5fb696e2-a2b8-4c4c-9c44-3786418b244f",
                  "parentUUID": "e4c350e7-6dd6-472d-926a-f13a59dcdd5a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate book details response structure",
                  "fullTitle": "Library Management System API Contract Validation should validate book details response structure",
                  "timedOut": null,
                  "duration": 406,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/ksiazkiDetailed.html\");\ncy.get(\"select.book-id\").select(1);\ncy.get(\"button.check\").click();\ncy.wait(\"@getBookDetails\").then(interception => {\n  // Sprawdzanie struktury odpowiedzi API dla szczegółów książki\n  const bookDetails = interception.response.body;\n  expect(bookDetails).to.have.property(\"id\");\n  expect(bookDetails).to.have.property(\"name\");\n  expect(bookDetails).to.have.property(\"author\");\n  expect(bookDetails.author).to.have.property(\"id\");\n  expect(bookDetails.author).to.have.property(\"firstName\");\n  expect(bookDetails.author).to.have.property(\"lastName\");\n});",
                  "err": {
                    "message": "AssertionError: expected '' to have property 'id'",
                    "estack": "AssertionError: expected '' to have property 'id'\n    at Context.eval (webpack:///./cypress/e2e/library_tests.cy.js:285:36)\n    at getRet (http://localhost:8080/__cypress/runner/cypress_runner.js:119616:20)\n    at tryCatcher (http://localhost:8080/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (http://localhost:8080/__cypress/runner/cypress_runner.js:4285:29)\n    at Context.thenFn (http://localhost:8080/__cypress/runner/cypress_runner.js:119627:66)\n    at Context.then (http://localhost:8080/__cypress/runner/cypress_runner.js:119878:21)",
                    "diff": null
                  },
                  "uuid": "071cf2f5-b359-4729-96bd-783bfc4a0131",
                  "parentUUID": "e4c350e7-6dd6-472d-926a-f13a59dcdd5a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate author details response structure",
                  "fullTitle": "Library Management System API Contract Validation should validate author details response structure",
                  "timedOut": null,
                  "duration": 399,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/autorzyDetailed.html\");\ncy.get(\"select.author-id\").select(1);\ncy.get(\"button.check\").click();\ncy.wait(\"@getAuthorDetails\").then(interception => {\n  // Sprawdzanie struktury odpowiedzi API dla szczegółów autora\n  const authorDetails = interception.response.body;\n  expect(authorDetails).to.have.property(\"id\");\n  expect(authorDetails).to.have.property(\"firstName\");\n  expect(authorDetails).to.have.property(\"lastName\");\n  expect(authorDetails).to.have.property(\"books\");\n  expect(authorDetails.books).to.be.an(\"array\");\n});",
                  "err": {
                    "message": "AssertionError: expected '' to have property 'id'",
                    "estack": "AssertionError: expected '' to have property 'id'\n    at Context.eval (webpack:///./cypress/e2e/library_tests.cy.js:302:38)\n    at getRet (http://localhost:8080/__cypress/runner/cypress_runner.js:119616:20)\n    at tryCatcher (http://localhost:8080/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (http://localhost:8080/__cypress/runner/cypress_runner.js:4285:29)\n    at Context.thenFn (http://localhost:8080/__cypress/runner/cypress_runner.js:119627:66)\n    at Context.then (http://localhost:8080/__cypress/runner/cypress_runner.js:119878:21)",
                    "diff": null
                  },
                  "uuid": "6304908f-e094-4b9b-9dff-2772e74ef972",
                  "parentUUID": "e4c350e7-6dd6-472d-926a-f13a59dcdd5a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ea086968-eb9f-459d-9994-d78d92464472",
                "5fb696e2-a2b8-4c4c-9c44-3786418b244f"
              ],
              "failures": [
                "071cf2f5-b359-4729-96bd-783bfc4a0131",
                "6304908f-e094-4b9b-9dff-2772e74ef972"
              ],
              "pending": [],
              "skipped": [],
              "duration": 968,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d17aae0c-e342-4b3c-9f6c-fcf86793eb99",
              "title": "UI Elements Visibility",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should ensure all navigation buttons are visible",
                  "fullTitle": "Library Management System UI Elements Visibility should ensure all navigation buttons are visible",
                  "timedOut": null,
                  "duration": 103,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/landingPage.html\");\ncy.get(\"nav table\").should(\"be.visible\");\ncy.get(\"nav a\").should(\"have.length.at.least\", 10);\ncy.get(\"nav a\").each($a => {\n  cy.wrap($a).should(\"be.visible\");\n});",
                  "err": {},
                  "uuid": "65b53eae-c84c-451f-b10f-db5b96cc650c",
                  "parentUUID": "d17aae0c-e342-4b3c-9f6c-fcf86793eb99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should verify form elements are accessible",
                  "fullTitle": "Library Management System UI Elements Visibility should verify form elements are accessible",
                  "timedOut": null,
                  "duration": 187,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Check add book form\ncy.visit(\"/dodajKsiazke.html\");\ncy.get(\"input.title\").should(\"be.visible\").and(\"be.enabled\");\ncy.get(\"select.author-id\").should(\"be.visible\").and(\"be.enabled\");\ncy.get(\"button.Add\").should(\"be.visible\").and(\"be.enabled\");\n// Check add author form\ncy.visit(\"/dodajAutora.html\");\ncy.get(\"input.firstName\").should(\"be.visible\").and(\"be.enabled\");\ncy.get(\"input.lastName\").should(\"be.visible\").and(\"be.enabled\");\ncy.get(\"button.Add\").should(\"be.visible\").and(\"be.enabled\");",
                  "err": {
                    "message": "SyntaxError: The following error originated from your application code, not from Cypress.\n\n  > Identifier 'apiURL' has already been declared\n\nWhen Cypress detects uncaught errors originating from your application it will automatically fail the current test.\n\nThis behavior is configurable, and you can choose to turn this off by listening to the `uncaught:exception` event.\n\nhttps://on.cypress.io/uncaught-exception-from-application",
                    "estack": "SyntaxError: The following error originated from your application code, not from Cypress.\n\n  > Identifier 'apiURL' has already been declared\n\nWhen Cypress detects uncaught errors originating from your application it will automatically fail the current test.\n\nThis behavior is configurable, and you can choose to turn this off by listening to the `uncaught:exception` event.\n\nhttps://on.cypress.io/uncaught-exception-from-application",
                    "diff": null
                  },
                  "uuid": "827e1fb1-19a5-41a1-aec8-edddce375949",
                  "parentUUID": "d17aae0c-e342-4b3c-9f6c-fcf86793eb99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should check for visual bugs in tables",
                  "fullTitle": "Library Management System UI Elements Visibility should check for visual bugs in tables",
                  "timedOut": null,
                  "duration": 4177,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/ksiazki.html\");\ncy.get(\".output-table\").should(\"be.visible\");\ncy.get(\"thead td\").should(\"have.length\", 2);\ncy.visit(\"/autorzy.html\");\ncy.get(\".output-table\").should(\"be.visible\");\ncy.get(\"thead td\").should(\"have.length\", 3);",
                  "err": {
                    "message": "AssertionError: Timed out retrying after 4000ms: Too many elements found. Found '3', expected '2'.",
                    "estack": "AssertionError: Timed out retrying after 4000ms: Too many elements found. Found '3', expected '2'.\n    at Context.eval (webpack:///./cypress/e2e/library_tests.cy.js:338:25)",
                    "diff": "- 3\n+ 2\n"
                  },
                  "uuid": "11f702d0-abfb-47cb-8460-20fd1b8314fa",
                  "parentUUID": "d17aae0c-e342-4b3c-9f6c-fcf86793eb99",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "65b53eae-c84c-451f-b10f-db5b96cc650c"
              ],
              "failures": [
                "827e1fb1-19a5-41a1-aec8-edddce375949",
                "11f702d0-abfb-47cb-8460-20fd1b8314fa"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4467,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "e594501d-b742-4508-a710-ee4c238e0119",
            "6f8f3987-36e2-4cb0-9775-dec57e8ab2a5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 441,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/.jsons",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}