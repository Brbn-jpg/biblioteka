{
  "stats": {
    "suites": 5,
    "tests": 22,
    "passes": 16,
    "pending": 0,
    "failures": 6,
    "start": "2025-05-02T13:50:23.013Z",
    "end": "2025-05-02T13:50:24.759Z",
    "duration": 1746,
    "testsRegistered": 22,
    "passPercent": 72.72727272727273,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9aa9847c-0625-46b4-b6b3-e00f2e0d0632",
      "title": "",
      "fullFile": "cypress/e2e/api_tests.cy.js",
      "file": "cypress/e2e/api_tests.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "870c33c5-3dbc-4964-9760-0a91c59f03a3",
          "title": "API Tests - Library Management System",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8e75e64e-cb51-484f-ae7c-6defeffd1fe1",
              "title": "Book API Endpoints",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get all books",
                  "fullTitle": "API Tests - Library Management System Book API Endpoints should get all books",
                  "timedOut": null,
                  "duration": 72,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request(\"GET\", \"http://localhost:8080/books\").then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.be.an(\"array\");\n  expect(response.body.length).to.be.greaterThan(0);\n});",
                  "err": {},
                  "uuid": "a5de907d-bf84-4c06-9197-45d7303658da",
                  "parentUUID": "8e75e64e-cb51-484f-ae7c-6defeffd1fe1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should get a book by ID",
                  "fullTitle": "API Tests - Library Management System Book API Endpoints should get a book by ID",
                  "timedOut": null,
                  "duration": 48,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// First get all books to find a valid ID\ncy.request(\"GET\", \"http://localhost:8080/books\").then(response => {\n  const bookId = response.body[0].id;\n  // Then get specific book by ID\n  cy.request(\"GET\", `http://localhost:8080/books/${bookId}`).then(bookResponse => {\n    expect(bookResponse.status).to.eq(200);\n    expect(bookResponse.body).to.not.be.null;\n  });\n});",
                  "err": {},
                  "uuid": "7a45c13a-69aa-47a1-8a4e-35d194eec27f",
                  "parentUUID": "8e75e64e-cb51-484f-ae7c-6defeffd1fe1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 when book ID does not exist",
                  "fullTitle": "API Tests - Library Management System Book API Endpoints should return 404 when book ID does not exist",
                  "timedOut": null,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: \"GET\",\n  url: \"http://localhost:8080/books/99999\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(404);\n});",
                  "err": {},
                  "uuid": "b765bf6d-f9e6-4e6d-bc1f-a153ad53bef3",
                  "parentUUID": "8e75e64e-cb51-484f-ae7c-6defeffd1fe1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should get detailed book information",
                  "fullTitle": "API Tests - Library Management System Book API Endpoints should get detailed book information",
                  "timedOut": null,
                  "duration": 194,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// First get all books to find a valid ID\ncy.request(\"GET\", \"http://localhost:8080/books\").then(response => {\n  const bookId = response.body[0].id;\n  // Then get detailed book information\n  cy.request(\"GET\", `http://localhost:8080/books/${bookId}/details`).then(detailsResponse => {\n    expect(detailsResponse.status).to.eq(200);\n    expect(detailsResponse.body).to.have.property(\"id\");\n    expect(detailsResponse.body).to.have.property(\"name\");\n    expect(detailsResponse.body).to.have.property(\"author\");\n    expect(detailsResponse.body.author).to.have.property(\"id\");\n    expect(detailsResponse.body.author).to.have.property(\"firstName\");\n    expect(detailsResponse.body.author).to.have.property(\"lastName\");\n  });\n});",
                  "err": {
                    "message": "AssertionError: expected { Object (first_name, last_name, ...) } to have property 'id'",
                    "estack": "AssertionError: expected { Object (first_name, last_name, ...) } to have property 'id'\n    at Context.eval (webpack:///./cypress/e2e/api_tests.cy.js:57:56)\n    at getRet (http://localhost:8080/__cypress/runner/cypress_runner.js:119616:20)\n    at tryCatcher (http://localhost:8080/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (http://localhost:8080/__cypress/runner/cypress_runner.js:4285:29)\n    at Context.thenFn (http://localhost:8080/__cypress/runner/cypress_runner.js:119627:66)\n    at Context.then (http://localhost:8080/__cypress/runner/cypress_runner.js:119878:21)",
                    "diff": null
                  },
                  "uuid": "3782926b-a439-40ff-8b2e-77ce48a34fff",
                  "parentUUID": "8e75e64e-cb51-484f-ae7c-6defeffd1fe1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should add a new book",
                  "fullTitle": "API Tests - Library Management System Book API Endpoints should add a new book",
                  "timedOut": null,
                  "duration": 165,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// First get authors to find a valid author ID\ncy.request(\"GET\", \"http://localhost:8080/author\").then(authorsResponse => {\n  const authorId = authorsResponse.body[0].author_id;\n  const newBook = {\n    name: \"Test Book via API\",\n    author_id: authorId.toString()\n  };\n  cy.request(\"POST\", \"http://localhost:8080/books/addBook\", newBook).then(addResponse => {\n    expect(addResponse.status).to.eq(200);\n    expect(addResponse.body).to.have.property(\"id\");\n    expect(addResponse.body).to.have.property(\"name\", \"Test Book via API\");\n    expect(addResponse.body).to.have.property(\"author\");\n    expect(addResponse.body.author).to.have.property(\"id\", authorId);\n  });\n});",
                  "err": {
                    "message": "AssertionError: expected { Object (first_name, last_name, ...) } to have property 'id'",
                    "estack": "AssertionError: expected { Object (first_name, last_name, ...) } to have property 'id'\n    at Context.eval (webpack:///./cypress/e2e/api_tests.cy.js:88:52)\n    at getRet (http://localhost:8080/__cypress/runner/cypress_runner.js:119616:20)\n    at tryCatcher (http://localhost:8080/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (http://localhost:8080/__cypress/runner/cypress_runner.js:4285:29)\n    at Context.thenFn (http://localhost:8080/__cypress/runner/cypress_runner.js:119627:66)\n    at Context.then (http://localhost:8080/__cypress/runner/cypress_runner.js:119878:21)",
                    "diff": null
                  },
                  "uuid": "db0b3286-91c9-4059-9c86-542b20c27544",
                  "parentUUID": "8e75e64e-cb51-484f-ae7c-6defeffd1fe1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update an existing book",
                  "fullTitle": "API Tests - Library Management System Book API Endpoints should update an existing book",
                  "timedOut": null,
                  "duration": 44,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// First get all books to find a valid ID\ncy.request(\"GET\", \"http://localhost:8080/books\").then(response => {\n  var _response$body$0$auth;\n  const bookId = response.body[0].id;\n  const authorId = ((_response$body$0$auth = response.body[0].author) === null || _response$body$0$auth === void 0 ? void 0 : _response$body$0$auth.author_id) || 1;\n  const updatedBook = {\n    name: \"Updated Book Title via API\",\n    author: {\n      author_id: authorId\n    }\n  };\n  cy.request(\"PUT\", `http://localhost:8080/books/updateBook/${bookId}`, updatedBook).then(updateResponse => {\n    expect(updateResponse.status).to.eq(200);\n    expect(updateResponse.body).to.have.property(\"id\", bookId);\n    expect(updateResponse.body).to.have.property(\"name\", \"Updated Book Title via API\");\n  });\n});",
                  "err": {},
                  "uuid": "68a1f54a-ac90-49de-8ce3-46dedb5b1123",
                  "parentUUID": "8e75e64e-cb51-484f-ae7c-6defeffd1fe1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should delete a book",
                  "fullTitle": "API Tests - Library Management System Book API Endpoints should delete a book",
                  "timedOut": null,
                  "duration": 59,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// First create a book to delete\ncy.request(\"GET\", \"http://localhost:8080/author\").then(authorsResponse => {\n  const authorId = authorsResponse.body[0].author_id;\n  const newBook = {\n    name: \"Book to Delete\",\n    author_id: authorId.toString()\n  };\n  cy.request(\"POST\", \"http://localhost:8080/books/addBook\", newBook).then(addResponse => {\n    const bookToDeleteId = addResponse.body.id;\n    // Then delete the book\n    cy.request(\"DELETE\", `http://localhost:8080/books/deleteBook/${bookToDeleteId}`).then(deleteResponse => {\n      expect(deleteResponse.status).to.eq(204);\n      // Verify book was deleted\n      cy.request({\n        method: \"GET\",\n        url: `http://localhost:8080/books/${bookToDeleteId}`,\n        failOnStatusCode: false\n      }).then(verifyResponse => {\n        expect(verifyResponse.status).to.eq(404);\n      });\n    });\n  });\n});",
                  "err": {},
                  "uuid": "8d2eec26-d091-4f29-a51a-4d2fb9320b7d",
                  "parentUUID": "8e75e64e-cb51-484f-ae7c-6defeffd1fe1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a5de907d-bf84-4c06-9197-45d7303658da",
                "7a45c13a-69aa-47a1-8a4e-35d194eec27f",
                "b765bf6d-f9e6-4e6d-bc1f-a153ad53bef3",
                "68a1f54a-ac90-49de-8ce3-46dedb5b1123",
                "8d2eec26-d091-4f29-a51a-4d2fb9320b7d"
              ],
              "failures": [
                "3782926b-a439-40ff-8b2e-77ce48a34fff",
                "db0b3286-91c9-4059-9c86-542b20c27544"
              ],
              "pending": [],
              "skipped": [],
              "duration": 600,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "62816a37-2f9f-4aab-8dca-9ba2dee8247d",
              "title": "Author API Endpoints",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get all authors",
                  "fullTitle": "API Tests - Library Management System Author API Endpoints should get all authors",
                  "timedOut": null,
                  "duration": 34,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request(\"GET\", \"http://localhost:8080/author\").then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.be.an(\"array\");\n  expect(response.body.length).to.be.greaterThan(0);\n});",
                  "err": {},
                  "uuid": "40cd17ee-7483-4911-beb0-4f3b619f6169",
                  "parentUUID": "62816a37-2f9f-4aab-8dca-9ba2dee8247d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should get an author by ID",
                  "fullTitle": "API Tests - Library Management System Author API Endpoints should get an author by ID",
                  "timedOut": null,
                  "duration": 27,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// First get all authors to find a valid ID\ncy.request(\"GET\", \"http://localhost:8080/author\").then(response => {\n  const authorId = response.body[0].author_id;\n  // Then get specific author by ID\n  cy.request(\"GET\", `http://localhost:8080/author/${authorId}`).then(authorResponse => {\n    expect(authorResponse.status).to.eq(200);\n    expect(authorResponse.body).to.not.be.null;\n  });\n});",
                  "err": {},
                  "uuid": "d45967a6-5b9f-4498-a23d-f6c932cc61be",
                  "parentUUID": "62816a37-2f9f-4aab-8dca-9ba2dee8247d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 404 when author ID does not exist",
                  "fullTitle": "API Tests - Library Management System Author API Endpoints should return 404 when author ID does not exist",
                  "timedOut": null,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: \"GET\",\n  url: \"http://localhost:8080/author/99999\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(404);\n});",
                  "err": {},
                  "uuid": "e65fc654-58f6-4778-97ce-93015b908580",
                  "parentUUID": "62816a37-2f9f-4aab-8dca-9ba2dee8247d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should get detailed author information",
                  "fullTitle": "API Tests - Library Management System Author API Endpoints should get detailed author information",
                  "timedOut": null,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// First get all authors to find a valid ID\ncy.request(\"GET\", \"http://localhost:8080/author\").then(response => {\n  const authorId = response.body[0].author_id;\n  // Then get detailed author information\n  cy.request(\"GET\", `http://localhost:8080/author/${authorId}/details`).then(detailsResponse => {\n    expect(detailsResponse.status).to.eq(200);\n    expect(detailsResponse.body).to.have.property(\"id\");\n    expect(detailsResponse.body).to.have.property(\"firstName\");\n    expect(detailsResponse.body).to.have.property(\"lastName\");\n    expect(detailsResponse.body).to.have.property(\"books\");\n    expect(detailsResponse.body.books).to.be.an(\"array\");\n  });\n});",
                  "err": {},
                  "uuid": "e44114dc-7862-4e15-b652-2099ff3cd93d",
                  "parentUUID": "62816a37-2f9f-4aab-8dca-9ba2dee8247d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should add a new author",
                  "fullTitle": "API Tests - Library Management System Author API Endpoints should add a new author",
                  "timedOut": null,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newAuthor = {\n  firstName: \"Test\",\n  lastName: \"Author via API\"\n};\ncy.request(\"POST\", \"http://localhost:8080/author/addAuthor\", newAuthor).then(addResponse => {\n  expect(addResponse.status).to.eq(200);\n  expect(addResponse.body).to.have.property(\"author_id\");\n  expect(addResponse.body).to.have.property(\"firstName\", \"Test\");\n  expect(addResponse.body).to.have.property(\"lastName\", \"Author via API\");\n});",
                  "err": {},
                  "uuid": "3e102f9f-5b2b-49e8-a25a-8b59dc86a0c9",
                  "parentUUID": "62816a37-2f9f-4aab-8dca-9ba2dee8247d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update an existing author",
                  "fullTitle": "API Tests - Library Management System Author API Endpoints should update an existing author",
                  "timedOut": null,
                  "duration": 37,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// First get all authors to find a valid ID\ncy.request(\"GET\", \"http://localhost:8080/author\").then(response => {\n  const authorId = response.body[0].author_id;\n  const updatedAuthor = {\n    firstName: \"Updated\",\n    lastName: \"Author Name via API\"\n  };\n  cy.request(\"PUT\", `http://localhost:8080/author/updateAuthor/${authorId}`, updatedAuthor).then(updateResponse => {\n    expect(updateResponse.status).to.eq(200);\n    expect(updateResponse.body).to.have.property(\"author_id\", authorId);\n    expect(updateResponse.body).to.have.property(\"firstName\", \"Updated\");\n    expect(updateResponse.body).to.have.property(\"lastName\", \"Author Name via API\");\n  });\n});",
                  "err": {},
                  "uuid": "a99d8dc4-f136-40de-8a34-80a589d6b837",
                  "parentUUID": "62816a37-2f9f-4aab-8dca-9ba2dee8247d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should delete an author",
                  "fullTitle": "API Tests - Library Management System Author API Endpoints should delete an author",
                  "timedOut": null,
                  "duration": 42,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// First create an author to delete\nconst newAuthor = {\n  firstName: \"Author\",\n  lastName: \"To Delete\"\n};\ncy.request(\"POST\", \"http://localhost:8080/author/addAuthor\", newAuthor).then(addResponse => {\n  const authorToDeleteId = addResponse.body.author_id;\n  // Then delete the author\n  cy.request(\"DELETE\", `http://localhost:8080/author/deleteAuthor/${authorToDeleteId}`).then(deleteResponse => {\n    expect(deleteResponse.status).to.eq(204);\n    // Verify author was deleted\n    cy.request({\n      method: \"GET\",\n      url: `http://localhost:8080/author/${authorToDeleteId}`,\n      failOnStatusCode: false\n    }).then(verifyResponse => {\n      expect(verifyResponse.status).to.eq(404);\n    });\n  });\n});",
                  "err": {},
                  "uuid": "385affbc-8caf-41d8-8f87-790095dcc291",
                  "parentUUID": "62816a37-2f9f-4aab-8dca-9ba2dee8247d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "40cd17ee-7483-4911-beb0-4f3b619f6169",
                "d45967a6-5b9f-4498-a23d-f6c932cc61be",
                "e65fc654-58f6-4778-97ce-93015b908580",
                "e44114dc-7862-4e15-b652-2099ff3cd93d",
                "3e102f9f-5b2b-49e8-a25a-8b59dc86a0c9",
                "a99d8dc4-f136-40de-8a34-80a589d6b837",
                "385affbc-8caf-41d8-8f87-790095dcc291"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 216,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6d4ea50b-ae38-47da-b5d7-14dad2aa3351",
              "title": "API Edge Cases and Error Handling",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should handle invalid book data",
                  "fullTitle": "API Tests - Library Management System API Edge Cases and Error Handling should handle invalid book data",
                  "timedOut": null,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidBook = {\n  // Missing required name field\n  author_id: \"1\"\n};\ncy.request({\n  method: \"POST\",\n  url: \"http://localhost:8080/books/addBook\",\n  failOnStatusCode: false,\n  body: invalidBook\n}).then(response => {\n  // Should return 400 or 500 depending on backend validation\n  expect(response.status).to.be.oneOf([400, 500]);\n});",
                  "err": {},
                  "uuid": "bcf9186d-f606-4f33-9ca6-775b81a436aa",
                  "parentUUID": "6d4ea50b-ae38-47da-b5d7-14dad2aa3351",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle invalid author data",
                  "fullTitle": "API Tests - Library Management System API Edge Cases and Error Handling should handle invalid author data",
                  "timedOut": null,
                  "duration": 145,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const invalidAuthor = {\n  // Both firstName and lastName fields empty\n  firstName: \"\",\n  lastName: \"\"\n};\ncy.request({\n  method: \"POST\",\n  url: \"http://localhost:8080/author/addAuthor\",\n  failOnStatusCode: false,\n  body: invalidAuthor\n}).then(response => {\n  // Should return 400 or 500 depending on backend validation\n  expect(response.status).to.be.oneOf([400, 500]);\n});",
                  "err": {
                    "message": "AssertionError: expected 200 to be one of [ 400, 500 ]",
                    "estack": "AssertionError: expected 200 to be one of [ 400, 500 ]\n    at Context.eval (webpack:///./cypress/e2e/api_tests.cy.js:326:38)\n    at getRet (http://localhost:8080/__cypress/runner/cypress_runner.js:119616:20)\n    at tryCatcher (http://localhost:8080/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (http://localhost:8080/__cypress/runner/cypress_runner.js:4285:29)\n    at Context.thenFn (http://localhost:8080/__cypress/runner/cypress_runner.js:119627:66)\n    at Context.then (http://localhost:8080/__cypress/runner/cypress_runner.js:119878:21)",
                    "diff": "- 200\n+ [ 400, 500 ]\n"
                  },
                  "uuid": "6808b43b-16ca-4c82-b5ac-94b48fa9fa6f",
                  "parentUUID": "6d4ea50b-ae38-47da-b5d7-14dad2aa3351",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle update with non-existent author ID",
                  "fullTitle": "API Tests - Library Management System API Edge Cases and Error Handling should handle update with non-existent author ID",
                  "timedOut": null,
                  "duration": 37,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Get a book to update\ncy.request(\"GET\", \"http://localhost:8080/books\").then(response => {\n  const bookId = response.body[0].id;\n  const updatedBook = {\n    name: \"Valid Name\",\n    author: {\n      author_id: 99999 // Non-existent author ID\n    }\n  };\n  cy.request({\n    method: \"PUT\",\n    url: `http://localhost:8080/books/updateBook/${bookId}`,\n    failOnStatusCode: false,\n    body: updatedBook\n  }).then(response => {\n    expect(response.status).to.eq(404);\n  });\n});",
                  "err": {},
                  "uuid": "4205ff7e-9b71-46b6-ad37-180a6a7f872d",
                  "parentUUID": "6d4ea50b-ae38-47da-b5d7-14dad2aa3351",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should handle concurrent operations",
                  "fullTitle": "API Tests - Library Management System API Edge Cases and Error Handling should handle concurrent operations",
                  "timedOut": null,
                  "duration": 165,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Perform multiple operations in parallel to test server robustness\nconst promises = [];\n// Add a new author\nconst authorPromise = cy.request(\"POST\", \"http://localhost:8080/author/addAuthor\", {\n  firstName: \"Concurrent\",\n  lastName: \"Test Author\"\n});\npromises.push(authorPromise);\n// Get all books\nconst booksPromise = cy.request(\"GET\", \"http://localhost:8080/books\");\npromises.push(booksPromise);\n// Get all authors\nconst authorsPromise = cy.request(\"GET\", \"http://localhost:8080/author\");\npromises.push(authorsPromise);\n// All requests should complete successfully\ncy.wrap(promises).then(responses => {\n  responses.forEach(response => {\n    expect(response.status).to.be.oneOf([200, 201, 204]);\n  });\n});",
                  "err": {
                    "message": "AssertionError: expected undefined to be one of [ 200, 201, 204 ]",
                    "estack": "AssertionError: expected undefined to be one of [ 200, 201, 204 ]\n    at eval (webpack:///./cypress/e2e/api_tests.cy.js:379:40)\nat Array.forEach (<anonymous>)\n    at Context.eval (webpack:///./cypress/e2e/api_tests.cy.js:378:18)\n    at getRet (http://localhost:8080/__cypress/runner/cypress_runner.js:119616:20)\n    at tryCatcher (http://localhost:8080/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (http://localhost:8080/__cypress/runner/cypress_runner.js:4285:29)",
                    "diff": null
                  },
                  "uuid": "56db7bb4-e322-488d-90c3-9e6f6e14ee5e",
                  "parentUUID": "6d4ea50b-ae38-47da-b5d7-14dad2aa3351",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bcf9186d-f606-4f33-9ca6-775b81a436aa",
                "4205ff7e-9b71-46b6-ad37-180a6a7f872d"
              ],
              "failures": [
                "6808b43b-16ca-4c82-b5ac-94b48fa9fa6f",
                "56db7bb4-e322-488d-90c3-9e6f6e14ee5e"
              ],
              "pending": [],
              "skipped": [],
              "duration": 370,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "123d178c-b343-45e8-bedd-58071df47f80",
              "title": "API Contract Testing",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should verify book response structure",
                  "fullTitle": "API Tests - Library Management System API Contract Testing should verify book response structure",
                  "timedOut": null,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request(\"GET\", \"http://localhost:8080/books\").then(response => {\n  expect(response.status).to.eq(200);\n  if (response.body.length > 0) {\n    const book = response.body[0];\n    expect(book).to.have.property(\"id\");\n    expect(book).to.have.property(\"name\");\n    expect(book).to.have.property(\"author\");\n    if (book.author) {\n      expect(book.author).to.have.property(\"author_id\");\n      expect(book.author).to.have.property(\"firstName\");\n      expect(book.author).to.have.property(\"lastName\");\n    }\n  }\n});",
                  "err": {},
                  "uuid": "a56b34f6-0afd-48af-a32c-7d8c4f446e83",
                  "parentUUID": "123d178c-b343-45e8-bedd-58071df47f80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should verify author response structure",
                  "fullTitle": "API Tests - Library Management System API Contract Testing should verify author response structure",
                  "timedOut": null,
                  "duration": 141,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.request(\"GET\", \"http://localhost:8080/author\").then(response => {\n  expect(response.status).to.eq(200);\n  if (response.body.length > 0) {\n    const author = response.body[0];\n    expect(author).to.have.property(\"author_id\");\n    expect(author).to.have.property(\"firstName\");\n    expect(author).to.have.property(\"lastName\");\n    expect(author).to.have.property(\"books\");\n    expect(author.books).to.be.an(\"array\");\n  }\n});",
                  "err": {
                    "message": "AssertionError: expected { Object (author_id, firstName, ...) } to have property 'books'",
                    "estack": "AssertionError: expected { Object (author_id, firstName, ...) } to have property 'books'\n    at Context.eval (webpack:///./cypress/e2e/api_tests.cy.js:414:33)\n    at getRet (http://localhost:8080/__cypress/runner/cypress_runner.js:119616:20)\n    at tryCatcher (http://localhost:8080/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (http://localhost:8080/__cypress/runner/cypress_runner.js:4285:29)\n    at Context.thenFn (http://localhost:8080/__cypress/runner/cypress_runner.js:119627:66)\n    at Context.then (http://localhost:8080/__cypress/runner/cypress_runner.js:119878:21)",
                    "diff": null
                  },
                  "uuid": "9bbebf73-580c-4618-8097-682a374ca810",
                  "parentUUID": "123d178c-b343-45e8-bedd-58071df47f80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should verify detailed book endpoint contract",
                  "fullTitle": "API Tests - Library Management System API Contract Testing should verify detailed book endpoint contract",
                  "timedOut": null,
                  "duration": 155,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.request(\"GET\", \"http://localhost:8080/books\").then(response => {\n  if (response.body.length > 0) {\n    const bookId = response.body[0].id;\n    cy.request(\"GET\", `http://localhost:8080/books/${bookId}/details`).then(detailsResponse => {\n      expect(detailsResponse.status).to.eq(200);\n      expect(detailsResponse.body).to.have.all.keys([\"id\", \"name\", \"author\"]);\n      expect(detailsResponse.body.author).to.have.all.keys([\"id\", \"firstName\", \"lastName\"]);\n    });\n  }\n});",
                  "err": {
                    "message": "AssertionError: expected { Object (first_name, last_name, ...) } to have keys 'id', 'firstName', and 'lastName'",
                    "estack": "AssertionError: expected { Object (first_name, last_name, ...) } to have keys 'id', 'firstName', and 'lastName'\n    at Context.eval (webpack:///./cypress/e2e/api_tests.cy.js:435:60)\n    at getRet (http://localhost:8080/__cypress/runner/cypress_runner.js:119616:20)\n    at tryCatcher (http://localhost:8080/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (http://localhost:8080/__cypress/runner/cypress_runner.js:4285:29)\n    at Context.thenFn (http://localhost:8080/__cypress/runner/cypress_runner.js:119627:66)\n    at Context.then (http://localhost:8080/__cypress/runner/cypress_runner.js:119878:21)",
                    "diff": "- [ 'author_id', 'first_name', 'last_name' ]\n+ [ 'firstName', 'id', 'lastName' ]\n"
                  },
                  "uuid": "76ff597b-1f65-49b3-b257-ccf431baf1a0",
                  "parentUUID": "123d178c-b343-45e8-bedd-58071df47f80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should verify detailed author endpoint contract",
                  "fullTitle": "API Tests - Library Management System API Contract Testing should verify detailed author endpoint contract",
                  "timedOut": null,
                  "duration": 33,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request(\"GET\", \"http://localhost:8080/author\").then(response => {\n  if (response.body.length > 0) {\n    const authorId = response.body[0].author_id;\n    cy.request(\"GET\", `http://localhost:8080/author/${authorId}/details`).then(detailsResponse => {\n      expect(detailsResponse.status).to.eq(200);\n      expect(detailsResponse.body).to.have.all.keys([\"id\", \"firstName\", \"lastName\", \"books\"]);\n      expect(detailsResponse.body.books).to.be.an(\"array\");\n      if (detailsResponse.body.books.length > 0) {\n        const book = detailsResponse.body.books[0];\n        expect(book).to.have.property(\"id\");\n        expect(book).to.have.property(\"name\");\n      }\n    });\n  }\n});",
                  "err": {},
                  "uuid": "dda49601-4736-477b-9313-9d1d622b7715",
                  "parentUUID": "123d178c-b343-45e8-bedd-58071df47f80",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a56b34f6-0afd-48af-a32c-7d8c4f446e83",
                "dda49601-4736-477b-9313-9d1d622b7715"
              ],
              "failures": [
                "9bbebf73-580c-4618-8097-682a374ca810",
                "76ff597b-1f65-49b3-b257-ccf431baf1a0"
              ],
              "pending": [],
              "skipped": [],
              "duration": 351,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/.jsons",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}