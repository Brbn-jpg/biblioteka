{
  "stats": {
    "suites": 4,
    "tests": 26,
    "passes": 21,
    "pending": 0,
    "failures": 5,
    "start": "2025-05-02T12:29:02.919Z",
    "end": "2025-05-02T12:29:08.765Z",
    "duration": 5846,
    "testsRegistered": 26,
    "passPercent": 80.76923076923077,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "fb7a4fe3-2b5a-41f2-b7a6-b8dfc71a0d8d",
      "title": "",
      "fullFile": "cypress/e2e/library_tests.cy.js",
      "file": "cypress/e2e/library_tests.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1292b7ed-b6fb-4eda-b5da-dd5073f6c62f",
          "title": "Library Management System",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should load the landing page",
              "fullTitle": "Library Management System should load the landing page",
              "timedOut": null,
              "duration": 284,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/landingPage.html\");\ncy.get(\"h1\").should(\"contain\", \"Strona startowa do Spring Boot REST Api\");\ncy.get(\"h2\").should(\"contain\", \"System biblioteczny\");\ncy.get(\".funkcje\").should(\"be.visible\");",
              "err": {},
              "uuid": "1b46a38a-58be-46a7-9c74-a46e997702f3",
              "parentUUID": "1292b7ed-b6fb-4eda-b5da-dd5073f6c62f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should navigate between pages",
              "fullTitle": "Library Management System should navigate between pages",
              "timedOut": null,
              "duration": 301,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/landingPage.html\");\n// Navigate to books page\ncy.get('a[href=\"ksiazki.html\"]').click();\ncy.url().should(\"include\", \"/ksiazki.html\");\ncy.get(\"h1\").should(\"contain\", \"Wszystkie Książki\");\n// Navigate to authors page\ncy.get('a[href=\"autorzy.html\"]').click();\ncy.url().should(\"include\", \"/autorzy.html\");\ncy.get(\"h1\").should(\"contain\", \"Wszyscy autorzy\");\n// Navigate back to landing page\ncy.get(\".start-page\").click();\ncy.url().should(\"include\", \"/landingPage.html\");",
              "err": {},
              "uuid": "8455e7a1-2c6a-4352-baa8-38e490b208ec",
              "parentUUID": "1292b7ed-b6fb-4eda-b5da-dd5073f6c62f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "8425b690-1a54-4612-b0af-65af2e450e30",
              "title": "Book Management",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should load books page with table",
                  "fullTitle": "Library Management System Book Management should load books page with table",
                  "timedOut": null,
                  "duration": 64,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/ksiazki.html\");\ncy.get(\".output-table\").should(\"be.visible\");\ncy.get(\"thead\").should(\"contain\", \"Tytuł\");\ncy.get(\"thead\").should(\"contain\", \"Id ksiązki\");",
                  "err": {},
                  "uuid": "7ad746a1-25e7-4717-807c-84e1644ddccd",
                  "parentUUID": "8425b690-1a54-4612-b0af-65af2e450e30",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should verify book API endpoint works",
                  "fullTitle": "Library Management System Book Management should verify book API endpoint works",
                  "timedOut": null,
                  "duration": 50,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// This test validates the actual endpoint exists and returns data\ncy.request({\n  url: \"/books\",\n  failOnStatusCode: false // Don't fail test if status code is not 2xx\n}).then(response => {\n  // Test should pass if status is 2xx (API endpoint works)\n  // Or fail otherwise (API endpoint changed or doesn't work)\n  expect(response.status).to.be.oneOf([200, 201, 202, 203, 204]);\n});",
                  "err": {},
                  "uuid": "601ba7fc-5ab5-4508-af51-6168bacd8b7b",
                  "parentUUID": "8425b690-1a54-4612-b0af-65af2e450e30",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should load book details page",
                  "fullTitle": "Library Management System Book Management should load book details page",
                  "timedOut": null,
                  "duration": 64,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/ksiazkiDetailed.html\");\ncy.get(\"select.book-id\").should(\"be.visible\");\ncy.get(\"button.check\").should(\"be.visible\");\ncy.get(\".output-table\").should(\"be.visible\");",
                  "err": {},
                  "uuid": "17c2eb38-4660-4216-9103-17a1dda72037",
                  "parentUUID": "8425b690-1a54-4612-b0af-65af2e450e30",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should verify book details API endpoint works",
                  "fullTitle": "Library Management System Book Management should verify book details API endpoint works",
                  "timedOut": null,
                  "duration": 228,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// This assumes there's at least one book with ID 1\ncy.request({\n  url: \"/books/1/details\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.be.oneOf([200, 201, 202, 203, 204]);\n});",
                  "err": {
                    "message": "AssertionError: expected 404 to be one of [ 200, 201, 202, 203, 204 ]",
                    "estack": "AssertionError: expected 404 to be one of [ 200, 201, 202, 203, 204 ]\n    at Context.eval (webpack:///./cypress/e2e/library_tests.cy.js:81:38)\n    at getRet (http://localhost:8080/__cypress/runner/cypress_runner.js:119616:20)\n    at tryCatcher (http://localhost:8080/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (http://localhost:8080/__cypress/runner/cypress_runner.js:4285:29)\n    at Context.thenFn (http://localhost:8080/__cypress/runner/cypress_runner.js:119627:66)\n    at Context.then (http://localhost:8080/__cypress/runner/cypress_runner.js:119878:21)",
                    "diff": "- 404\n+ [ 200, 201, 202, 203, 204 ]\n"
                  },
                  "uuid": "72371d96-8faf-4ec3-b0dc-319dc5a1b395",
                  "parentUUID": "8425b690-1a54-4612-b0af-65af2e450e30",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate add book form",
                  "fullTitle": "Library Management System Book Management should validate add book form",
                  "timedOut": null,
                  "duration": 570,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/dodajKsiazke.html\");\n// Submit without required fields\ncy.get(\"button.Add\").click();\ncy.url().should(\"include\", \"/dodajKsiazke.html\");\n// Fill required fields and submit\ncy.get(\"input.title\").type(\"Test Book Title\");\ncy.get(\"select.author-id\").select(1);\ncy.get(\"button.Add\").click();\ncy.get(\".added\").should(\"not.have.class\", \"invis\").and(\"contain\", \"Dodano ksiązkę\");",
                  "err": {},
                  "uuid": "90e46265-ac62-434f-9400-51c22e65f855",
                  "parentUUID": "8425b690-1a54-4612-b0af-65af2e450e30",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should verify add book API endpoint works",
                  "fullTitle": "Library Management System Book Management should verify add book API endpoint works",
                  "timedOut": null,
                  "duration": 254,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Test the actual endpoint with a sample payload\nconst payload = {\n  name: \"Test Book\",\n  author_id: \"1\"\n};\ncy.request({\n  method: \"POST\",\n  url: \"/books/addBook\",\n  body: payload,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.be.oneOf([200, 201, 202, 203, 204]);\n});",
                  "err": {
                    "message": "AssertionError: expected 404 to be one of [ 200, 201, 202, 203, 204 ]",
                    "estack": "AssertionError: expected 404 to be one of [ 200, 201, 202, 203, 204 ]\n    at Context.eval (webpack:///./cypress/e2e/library_tests.cy.js:114:38)\n    at getRet (http://localhost:8080/__cypress/runner/cypress_runner.js:119616:20)\n    at tryCatcher (http://localhost:8080/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (http://localhost:8080/__cypress/runner/cypress_runner.js:4285:29)\n    at Context.thenFn (http://localhost:8080/__cypress/runner/cypress_runner.js:119627:66)\n    at Context.then (http://localhost:8080/__cypress/runner/cypress_runner.js:119878:21)",
                    "diff": "- 404\n+ [ 200, 201, 202, 203, 204 ]\n"
                  },
                  "uuid": "c8fdb954-53c2-46c2-b99c-769b49b8dc7c",
                  "parentUUID": "8425b690-1a54-4612-b0af-65af2e450e30",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should test book update functionality",
                  "fullTitle": "Library Management System Book Management should test book update functionality",
                  "timedOut": null,
                  "duration": 782,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/zaktualizujKsiazke.html\");\n// Select book and update fields\ncy.get(\"select.book-id\").select(1);\ncy.get(\"input.title\").type(\"Updated Book Title\");\ncy.get(\"input.author-id\").type(\"1\");\n// Submit and check update message\ncy.get('button[type=\"submit\"]').click();\ncy.get(\".updated\").should(\"not.have.class\", \"invis\");",
                  "err": {},
                  "uuid": "e46803dc-1e36-4b72-a7a4-3ef9dcaf7714",
                  "parentUUID": "8425b690-1a54-4612-b0af-65af2e450e30",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should verify update book API endpoint works",
                  "fullTitle": "Library Management System Book Management should verify update book API endpoint works",
                  "timedOut": null,
                  "duration": 195,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Test the actual endpoint with a sample payload\nconst payload = {\n  name: \"Updated Book Title\",\n  author: {\n    author_id: 1\n  }\n};\ncy.request({\n  method: \"PUT\",\n  url: \"/books/updateBook/1\",\n  body: payload,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.be.oneOf([200, 201, 202, 203, 204]);\n});",
                  "err": {
                    "message": "AssertionError: expected 404 to be one of [ 200, 201, 202, 203, 204 ]",
                    "estack": "AssertionError: expected 404 to be one of [ 200, 201, 202, 203, 204 ]\n    at Context.eval (webpack:///./cypress/e2e/library_tests.cy.js:146:38)\n    at getRet (http://localhost:8080/__cypress/runner/cypress_runner.js:119616:20)\n    at tryCatcher (http://localhost:8080/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (http://localhost:8080/__cypress/runner/cypress_runner.js:4285:29)\n    at Context.thenFn (http://localhost:8080/__cypress/runner/cypress_runner.js:119627:66)\n    at Context.then (http://localhost:8080/__cypress/runner/cypress_runner.js:119878:21)",
                    "diff": "- 404\n+ [ 200, 201, 202, 203, 204 ]\n"
                  },
                  "uuid": "41c5fced-1ef8-4497-956f-5c5ce31c2297",
                  "parentUUID": "8425b690-1a54-4612-b0af-65af2e450e30",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should test book deletion",
                  "fullTitle": "Library Management System Book Management should test book deletion",
                  "timedOut": null,
                  "duration": 287,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/usunKsiazke.html\");\n// Select book and delete\ncy.get(\"select.book-id\").select(1);\ncy.get('button[type=\"submit\"]').click();\ncy.get(\".deleted\").should(\"not.have.class\", \"invis\");",
                  "err": {},
                  "uuid": "623ddc17-5d08-4f34-a9b8-5e62d33603c2",
                  "parentUUID": "8425b690-1a54-4612-b0af-65af2e450e30",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should verify delete book API endpoint works",
                  "fullTitle": "Library Management System Book Management should verify delete book API endpoint works",
                  "timedOut": null,
                  "duration": 52,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create a book to delete\nconst payload = {\n  name: \"Book to Delete\",\n  author_id: \"1\"\n};\n// First create a book (that we can delete)\ncy.request({\n  method: \"POST\",\n  url: \"/books/addBook\",\n  body: payload,\n  failOnStatusCode: false\n}).then(createResponse => {\n  if (createResponse.status === 200 && createResponse.body && createResponse.body.id) {\n    // Then try to delete it\n    cy.request({\n      method: \"DELETE\",\n      url: `/books/deleteBook/${createResponse.body.id}`,\n      failOnStatusCode: false\n    }).then(deleteResponse => {\n      expect(deleteResponse.status).to.be.oneOf([200, 201, 202, 203, 204]);\n    });\n  } else {\n    // If we couldn't create, try deleting book with ID 1\n    cy.request({\n      method: \"DELETE\",\n      url: \"/books/deleteBook/1\",\n      failOnStatusCode: false\n    }).then(deleteResponse => {\n      expect(deleteResponse.status).to.be.oneOf([200, 201, 202, 203, 204, 404]);\n    });\n  }\n});",
                  "err": {},
                  "uuid": "00d7f715-064d-4713-9f3a-2a604b5a1d3b",
                  "parentUUID": "8425b690-1a54-4612-b0af-65af2e450e30",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7ad746a1-25e7-4717-807c-84e1644ddccd",
                "601ba7fc-5ab5-4508-af51-6168bacd8b7b",
                "17c2eb38-4660-4216-9103-17a1dda72037",
                "90e46265-ac62-434f-9400-51c22e65f855",
                "e46803dc-1e36-4b72-a7a4-3ef9dcaf7714",
                "623ddc17-5d08-4f34-a9b8-5e62d33603c2",
                "00d7f715-064d-4713-9f3a-2a604b5a1d3b"
              ],
              "failures": [
                "72371d96-8faf-4ec3-b0dc-319dc5a1b395",
                "c8fdb954-53c2-46c2-b99c-769b49b8dc7c",
                "41c5fced-1ef8-4497-956f-5c5ce31c2297"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2546,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3984777c-0434-4bd3-890b-79661951972a",
              "title": "Author Management",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should load authors page with table",
                  "fullTitle": "Library Management System Author Management should load authors page with table",
                  "timedOut": null,
                  "duration": 58,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/autorzy.html\");\ncy.get(\".output-table\").should(\"be.visible\");\ncy.get(\"thead\").should(\"contain\", \"Imie\");\ncy.get(\"thead\").should(\"contain\", \"Nazwisko\");\ncy.get(\"thead\").should(\"contain\", \"Id autora\");",
                  "err": {},
                  "uuid": "23e63732-9135-4d3f-beb6-82d9191a3988",
                  "parentUUID": "3984777c-0434-4bd3-890b-79661951972a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should verify author API endpoint works",
                  "fullTitle": "Library Management System Author Management should verify author API endpoint works",
                  "timedOut": null,
                  "duration": 53,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// This test validates the actual endpoint exists and returns data\ncy.request({\n  url: \"/author\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.be.oneOf([200, 201, 202, 203, 204]);\n});",
                  "err": {},
                  "uuid": "3f35dcbf-5e26-4a1e-a67d-9750175d977a",
                  "parentUUID": "3984777c-0434-4bd3-890b-79661951972a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should load author details page",
                  "fullTitle": "Library Management System Author Management should load author details page",
                  "timedOut": null,
                  "duration": 64,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/autorzyDetailed.html\");\ncy.get(\"select.author-id\").should(\"be.visible\");\ncy.get(\"button.check\").should(\"be.visible\");\ncy.get(\".output-table\").should(\"be.visible\");",
                  "err": {},
                  "uuid": "d02fc84a-97ac-4dc3-968c-a6e7d3f14878",
                  "parentUUID": "3984777c-0434-4bd3-890b-79661951972a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should verify author details API endpoint works",
                  "fullTitle": "Library Management System Author Management should verify author details API endpoint works",
                  "timedOut": null,
                  "duration": 199,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// This assumes there's at least one author with ID 1\ncy.request({\n  url: \"/author/1/details\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.be.oneOf([200, 201, 202, 203, 204]);\n});",
                  "err": {
                    "message": "AssertionError: expected 404 to be one of [ 200, 201, 202, 203, 204 ]",
                    "estack": "AssertionError: expected 404 to be one of [ 200, 201, 202, 203, 204 ]\n    at Context.eval (webpack:///./cypress/e2e/library_tests.cy.js:236:38)\n    at getRet (http://localhost:8080/__cypress/runner/cypress_runner.js:119616:20)\n    at tryCatcher (http://localhost:8080/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (http://localhost:8080/__cypress/runner/cypress_runner.js:4285:29)\n    at Context.thenFn (http://localhost:8080/__cypress/runner/cypress_runner.js:119627:66)\n    at Context.then (http://localhost:8080/__cypress/runner/cypress_runner.js:119878:21)",
                    "diff": "- 404\n+ [ 200, 201, 202, 203, 204 ]\n"
                  },
                  "uuid": "e7d9582b-c69c-40fd-96e7-0aa8eb1bee5c",
                  "parentUUID": "3984777c-0434-4bd3-890b-79661951972a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should validate add author form",
                  "fullTitle": "Library Management System Author Management should validate add author form",
                  "timedOut": null,
                  "duration": 504,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/dodajAutora.html\");\n// Submit without required fields\ncy.get(\"button.Add\").click();\ncy.url().should(\"include\", \"/dodajAutora.html\");\n// Fill required fields and submit\ncy.get(\"input.firstName\").type(\"Test\");\ncy.get(\"input.lastName\").type(\"Author\");\ncy.get(\"button.Add\").click();\ncy.get(\".added\").should(\"not.have.class\", \"invis\").and(\"contain\", \"Dodano autora\");",
                  "err": {},
                  "uuid": "24e02352-3704-4c5c-8c69-363ac4b762b1",
                  "parentUUID": "3984777c-0434-4bd3-890b-79661951972a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should verify add author API endpoint works",
                  "fullTitle": "Library Management System Author Management should verify add author API endpoint works",
                  "timedOut": null,
                  "duration": 52,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Test the actual endpoint with a sample payload\nconst payload = {\n  firstName: \"Test\",\n  lastName: \"Author\"\n};\ncy.request({\n  method: \"POST\",\n  url: \"/author/addAuthor\",\n  body: payload,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.be.oneOf([200, 201, 202, 203, 204]);\n});",
                  "err": {},
                  "uuid": "56761496-f255-4ada-a208-6f0f6079c0ba",
                  "parentUUID": "3984777c-0434-4bd3-890b-79661951972a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should test author update functionality",
                  "fullTitle": "Library Management System Author Management should test author update functionality",
                  "timedOut": null,
                  "duration": 726,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/zaktualizujAutora.html\");\n// Select author and update fields\ncy.get(\"select.author-id\").select(1);\ncy.get(\"input.firstName\").type(\"Updated\");\ncy.get(\"input.lastName\").type(\"AuthorName\");\n// Submit and check update message\ncy.get('button[type=\"submit\"]').click();\ncy.get(\".updated\").should(\"not.have.class\", \"invis\");",
                  "err": {},
                  "uuid": "80a663d0-0948-40cb-a0a0-db4065bf08a5",
                  "parentUUID": "3984777c-0434-4bd3-890b-79661951972a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should verify update author API endpoint works",
                  "fullTitle": "Library Management System Author Management should verify update author API endpoint works",
                  "timedOut": null,
                  "duration": 188,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Test the actual endpoint with a sample payload\nconst payload = {\n  firstName: \"Updated\",\n  lastName: \"AuthorName\"\n};\ncy.request({\n  method: \"PUT\",\n  url: \"/author/updateAuthor/1\",\n  body: payload,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.be.oneOf([200, 201, 202, 203, 204]);\n});",
                  "err": {
                    "message": "AssertionError: expected 404 to be one of [ 200, 201, 202, 203, 204 ]",
                    "estack": "AssertionError: expected 404 to be one of [ 200, 201, 202, 203, 204 ]\n    at Context.eval (webpack:///./cypress/e2e/library_tests.cy.js:299:38)\n    at getRet (http://localhost:8080/__cypress/runner/cypress_runner.js:119616:20)\n    at tryCatcher (http://localhost:8080/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (http://localhost:8080/__cypress/runner/cypress_runner.js:4285:29)\n    at Context.thenFn (http://localhost:8080/__cypress/runner/cypress_runner.js:119627:66)\n    at Context.then (http://localhost:8080/__cypress/runner/cypress_runner.js:119878:21)",
                    "diff": "- 404\n+ [ 200, 201, 202, 203, 204 ]\n"
                  },
                  "uuid": "d27fc335-b994-4bb9-bf00-43a23b6f6c16",
                  "parentUUID": "3984777c-0434-4bd3-890b-79661951972a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should test author deletion",
                  "fullTitle": "Library Management System Author Management should test author deletion",
                  "timedOut": null,
                  "duration": 289,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/usunAutora.html\");\n// Select author and delete\ncy.get(\"select.author-id\").select(1);\ncy.get('button[type=\"submit\"]').click();\ncy.get(\".deleted\").should(\"not.have.class\", \"invis\");",
                  "err": {},
                  "uuid": "8245243b-12e3-455f-ac00-b1a9cffbf71c",
                  "parentUUID": "3984777c-0434-4bd3-890b-79661951972a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should verify delete author API endpoint works",
                  "fullTitle": "Library Management System Author Management should verify delete author API endpoint works",
                  "timedOut": null,
                  "duration": 57,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Create an author to delete\nconst payload = {\n  firstName: \"Author\",\n  lastName: \"To Delete\"\n};\n// First create an author (that we can delete)\ncy.request({\n  method: \"POST\",\n  url: \"/author/addAuthor\",\n  body: payload,\n  failOnStatusCode: false\n}).then(createResponse => {\n  if (createResponse.status === 200 && createResponse.body && createResponse.body.author_id) {\n    // Then try to delete it\n    cy.request({\n      method: \"DELETE\",\n      url: `/author/deleteAuthor/${createResponse.body.author_id}`,\n      failOnStatusCode: false\n    }).then(deleteResponse => {\n      expect(deleteResponse.status).to.be.oneOf([200, 201, 202, 203, 204]);\n    });\n  } else {\n    // If we couldn't create, try deleting author with ID 1\n    cy.request({\n      method: \"DELETE\",\n      url: \"/author/deleteAuthor/1\",\n      failOnStatusCode: false\n    }).then(deleteResponse => {\n      expect(deleteResponse.status).to.be.oneOf([200, 201, 202, 203, 204, 404]);\n    });\n  }\n});",
                  "err": {},
                  "uuid": "c4f41ccf-4093-4b30-a463-8dfa6cf901be",
                  "parentUUID": "3984777c-0434-4bd3-890b-79661951972a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "23e63732-9135-4d3f-beb6-82d9191a3988",
                "3f35dcbf-5e26-4a1e-a67d-9750175d977a",
                "d02fc84a-97ac-4dc3-968c-a6e7d3f14878",
                "24e02352-3704-4c5c-8c69-363ac4b762b1",
                "56761496-f255-4ada-a208-6f0f6079c0ba",
                "80a663d0-0948-40cb-a0a0-db4065bf08a5",
                "8245243b-12e3-455f-ac00-b1a9cffbf71c",
                "c4f41ccf-4093-4b30-a463-8dfa6cf901be"
              ],
              "failures": [
                "e7d9582b-c69c-40fd-96e7-0aa8eb1bee5c",
                "d27fc335-b994-4bb9-bf00-43a23b6f6c16"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2190,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "301c30f7-5300-411b-9ba5-a91b2535f38a",
              "title": "API Contract Testing",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should verify Book object structure",
                  "fullTitle": "Library Management System API Contract Testing should verify Book object structure",
                  "timedOut": null,
                  "duration": 47,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  url: \"/books\",\n  failOnStatusCode: false\n}).then(response => {\n  if (response.status === 200 && response.body && response.body.length > 0) {\n    const book = response.body[0];\n    // Check required properties exist\n    expect(book).to.have.property(\"id\");\n    expect(book).to.have.property(\"name\");\n    expect(book).to.have.property(\"author\");\n  }\n});",
                  "err": {},
                  "uuid": "26a4c489-3e5c-40d6-8418-a83757b61876",
                  "parentUUID": "301c30f7-5300-411b-9ba5-a91b2535f38a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should verify BookDTO object structure",
                  "fullTitle": "Library Management System API Contract Testing should verify BookDTO object structure",
                  "timedOut": null,
                  "duration": 46,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  url: \"/books/1/details\",\n  failOnStatusCode: false\n}).then(response => {\n  if (response.status === 200 && response.body) {\n    // Check required properties exist on BookDTO\n    expect(response.body).to.have.property(\"id\");\n    expect(response.body).to.have.property(\"name\");\n    expect(response.body).to.have.property(\"author\");\n    // Check AuthorDTO properties\n    if (response.body.author) {\n      expect(response.body.author).to.have.property(\"id\");\n      expect(response.body.author).to.have.property(\"firstName\");\n      expect(response.body.author).to.have.property(\"lastName\");\n    }\n  }\n});",
                  "err": {},
                  "uuid": "9771fd85-c18a-43d8-8670-f7b463e9afad",
                  "parentUUID": "301c30f7-5300-411b-9ba5-a91b2535f38a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should verify Author object structure",
                  "fullTitle": "Library Management System API Contract Testing should verify Author object structure",
                  "timedOut": null,
                  "duration": 49,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  url: \"/author\",\n  failOnStatusCode: false\n}).then(response => {\n  if (response.status === 200 && response.body && response.body.length > 0) {\n    const author = response.body[0];\n    // Check required properties exist\n    expect(author).to.have.property(\"author_id\");\n    expect(author).to.have.property(\"firstName\");\n    expect(author).to.have.property(\"lastName\");\n  }\n});",
                  "err": {},
                  "uuid": "a8b1e277-535a-40cb-88c8-2b638ca3bde8",
                  "parentUUID": "301c30f7-5300-411b-9ba5-a91b2535f38a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should verify AuthorDTO object structure",
                  "fullTitle": "Library Management System API Contract Testing should verify AuthorDTO object structure",
                  "timedOut": null,
                  "duration": 41,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  url: \"/author/1/details\",\n  failOnStatusCode: false\n}).then(response => {\n  if (response.status === 200 && response.body) {\n    // Check required properties exist\n    expect(response.body).to.have.property(\"id\");\n    expect(response.body).to.have.property(\"firstName\");\n    expect(response.body).to.have.property(\"lastName\");\n    expect(response.body).to.have.property(\"books\");\n  }\n});",
                  "err": {},
                  "uuid": "a6532ace-6349-4b03-8751-68a06a371499",
                  "parentUUID": "301c30f7-5300-411b-9ba5-a91b2535f38a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "26a4c489-3e5c-40d6-8418-a83757b61876",
                "9771fd85-c18a-43d8-8670-f7b463e9afad",
                "a8b1e277-535a-40cb-88c8-2b638ca3bde8",
                "a6532ace-6349-4b03-8751-68a06a371499"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 183,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "1b46a38a-58be-46a7-9c74-a46e997702f3",
            "8455e7a1-2c6a-4352-baa8-38e490b208ec"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 585,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/.jsons",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}