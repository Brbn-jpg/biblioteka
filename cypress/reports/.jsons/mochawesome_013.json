{
  "stats": {
    "suites": 1,
    "tests": 10,
    "passes": 8,
    "pending": 0,
    "failures": 2,
    "start": "2025-05-02T13:33:24.703Z",
    "end": "2025-05-02T13:33:25.820Z",
    "duration": 1117,
    "testsRegistered": 10,
    "passPercent": 80,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0b7e37c9-aaa4-45fa-af3d-ad9e5960ca04",
      "title": "",
      "fullFile": "cypress/e2e/api_tests.cy.js",
      "file": "cypress/e2e/api_tests.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "715dd318-b37d-4549-8f14-4262e77094e9",
          "title": "API Contract Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should verify book API contract",
              "fullTitle": "API Contract Tests should verify book API contract",
              "timedOut": null,
              "duration": 419,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Testowanie głównego endpointu books\ncy.request(\"/books\").then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.be.an(\"array\");\n  if (response.body.length > 0) {\n    const book = response.body[0];\n    // Sprawdzanie struktury danych książki\n    expect(book).to.have.property(\"id\");\n    expect(book).to.have.property(\"name\");\n    expect(book).to.have.property(\"author\");\n    // Sprawdzanie czy ID jest liczbą\n    expect(book.id).to.be.a(\"number\");\n    // Sprawdzanie czy nazwa jest stringiem\n    expect(book.name).to.be.a(\"string\");\n  }\n});\n// Testowanie endpointu szczegółów książki\ncy.request(\"/books/1/details\").then(response => {\n  expect(response.status).to.eq(200);\n  const bookDetails = response.body;\n  // Sprawdzanie struktury szczegółów książki\n  expect(bookDetails).to.have.property(\"id\");\n  expect(bookDetails).to.have.property(\"name\");\n  expect(bookDetails).to.have.property(\"author\");\n  // Sprawdzanie struktury autora w szczegółach książki\n  expect(bookDetails.author).to.have.property(\"id\");\n  expect(bookDetails.author).to.have.property(\"firstName\");\n  expect(bookDetails.author).to.have.property(\"lastName\");\n});",
              "err": {
                "message": "AssertionError: expected { Object (first_name, last_name, ...) } to have property 'id'",
                "estack": "AssertionError: expected { Object (first_name, last_name, ...) } to have property 'id'\n    at Context.eval (webpack:///./cypress/e2e/api_tests.cy.js:46:41)\n    at getRet (http://localhost:8080/__cypress/runner/cypress_runner.js:119616:20)\n    at tryCatcher (http://localhost:8080/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (http://localhost:8080/__cypress/runner/cypress_runner.js:4285:29)\n    at Context.thenFn (http://localhost:8080/__cypress/runner/cypress_runner.js:119627:66)\n    at Context.then (http://localhost:8080/__cypress/runner/cypress_runner.js:119878:21)",
                "diff": null
              },
              "uuid": "ec52d147-bf66-46f8-95b1-5963b4fc6a39",
              "parentUUID": "715dd318-b37d-4549-8f14-4262e77094e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify author API contract",
              "fullTitle": "API Contract Tests should verify author API contract",
              "timedOut": null,
              "duration": 163,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Testowanie głównego endpointu authors\ncy.request(\"/author\").then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.be.an(\"array\");\n  if (response.body.length > 0) {\n    const author = response.body[0];\n    // Sprawdzanie struktury danych autora\n    expect(author).to.have.property(\"author_id\");\n    expect(author).to.have.property(\"firstName\");\n    expect(author).to.have.property(\"lastName\");\n    expect(author).to.have.property(\"books\");\n    // Sprawdzanie czy ID jest liczbą\n    expect(author.author_id).to.be.a(\"number\");\n    // Sprawdzanie czy imię i nazwisko są stringami\n    expect(author.firstName).to.be.a(\"string\");\n    expect(author.lastName).to.be.a(\"string\");\n    // Sprawdzanie czy books jest tablicą\n    expect(author.books).to.be.an(\"array\");\n  }\n});\n// Testowanie endpointu szczegółów autora\ncy.request(\"/author/1/details\").then(response => {\n  expect(response.status).to.eq(200);\n  const authorDetails = response.body;\n  // Sprawdzanie struktury szczegółów autora\n  expect(authorDetails).to.have.property(\"id\");\n  expect(authorDetails).to.have.property(\"firstName\");\n  expect(authorDetails).to.have.property(\"lastName\");\n  expect(authorDetails).to.have.property(\"books\");\n  // Sprawdzanie czy books jest tablicą\n  expect(authorDetails.books).to.be.an(\"array\");\n  if (authorDetails.books.length > 0) {\n    const book = authorDetails.books[0];\n    // Sprawdzanie struktury książki w szczegółach autora\n    expect(book).to.have.property(\"id\");\n    expect(book).to.have.property(\"name\");\n  }\n});",
              "err": {
                "message": "AssertionError: expected { Object (author_id, firstName, ...) } to have property 'books'",
                "estack": "AssertionError: expected { Object (author_id, firstName, ...) } to have property 'books'\n    at Context.eval (webpack:///./cypress/e2e/api_tests.cy.js:64:31)\n    at getRet (http://localhost:8080/__cypress/runner/cypress_runner.js:119616:20)\n    at tryCatcher (http://localhost:8080/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (http://localhost:8080/__cypress/runner/cypress_runner.js:4285:29)\n    at Context.thenFn (http://localhost:8080/__cypress/runner/cypress_runner.js:119627:66)\n    at Context.then (http://localhost:8080/__cypress/runner/cypress_runner.js:119878:21)",
                "diff": null
              },
              "uuid": "cb3efbe5-189f-43d6-870b-bfa467a49ec9",
              "parentUUID": "715dd318-b37d-4549-8f14-4262e77094e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test book addition API contract",
              "fullTitle": "API Contract Tests should test book addition API contract",
              "timedOut": null,
              "duration": 70,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newBook = {\n  name: \"Nowa książka testowa\",\n  author_id: \"1\"\n};\ncy.request({\n  method: \"POST\",\n  url: \"/books/addBook\",\n  body: newBook\n}).then(response => {\n  expect(response.status).to.eq(200);\n  // Sprawdzanie struktury odpowiedzi po dodaniu książki\n  expect(response.body).to.have.property(\"id\");\n  expect(response.body).to.have.property(\"name\");\n  expect(response.body).to.have.property(\"author\");\n  expect(response.body.name).to.eq(newBook.name);\n});",
              "err": {},
              "uuid": "d48d5695-b034-43af-b474-7d51a2955351",
              "parentUUID": "715dd318-b37d-4549-8f14-4262e77094e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test author addition API contract",
              "fullTitle": "API Contract Tests should test author addition API contract",
              "timedOut": null,
              "duration": 33,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newAuthor = {\n  firstName: \"Nowy\",\n  lastName: \"Autor\"\n};\ncy.request({\n  method: \"POST\",\n  url: \"/author/addAuthor\",\n  body: newAuthor\n}).then(response => {\n  expect(response.status).to.eq(200);\n  // Sprawdzanie struktury odpowiedzi po dodaniu autora\n  expect(response.body).to.have.property(\"author_id\");\n  expect(response.body).to.have.property(\"firstName\");\n  expect(response.body).to.have.property(\"lastName\");\n  expect(response.body.firstName).to.eq(newAuthor.firstName);\n  expect(response.body.lastName).to.eq(newAuthor.lastName);\n});",
              "err": {},
              "uuid": "9e620d33-9471-4696-b99f-142df66c1cc3",
              "parentUUID": "715dd318-b37d-4549-8f14-4262e77094e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test book update API contract",
              "fullTitle": "API Contract Tests should test book update API contract",
              "timedOut": null,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const bookUpdate = {\n  name: \"Zaktualizowana książka\",\n  author: {\n    author_id: 1\n  }\n};\ncy.request({\n  method: \"PUT\",\n  url: \"/books/updateBook/1\",\n  body: bookUpdate\n}).then(response => {\n  expect(response.status).to.eq(200);\n  // Sprawdzanie struktury odpowiedzi po aktualizacji książki\n  expect(response.body).to.have.property(\"id\");\n  expect(response.body).to.have.property(\"name\");\n  expect(response.body).to.have.property(\"author\");\n  expect(response.body.name).to.eq(bookUpdate.name);\n});",
              "err": {},
              "uuid": "8bc80a64-9791-4dee-b4b2-25e33551ba00",
              "parentUUID": "715dd318-b37d-4549-8f14-4262e77094e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test author update API contract",
              "fullTitle": "API Contract Tests should test author update API contract",
              "timedOut": null,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const authorUpdate = {\n  firstName: \"Zaktualizowane\",\n  lastName: \"Nazwisko\"\n};\ncy.request({\n  method: \"PUT\",\n  url: \"/author/updateAuthor/1\",\n  body: authorUpdate\n}).then(response => {\n  expect(response.status).to.eq(200);\n  // Sprawdzanie struktury odpowiedzi po aktualizacji autora\n  expect(response.body).to.have.property(\"author_id\");\n  expect(response.body).to.have.property(\"firstName\");\n  expect(response.body).to.have.property(\"lastName\");\n  expect(response.body.firstName).to.eq(authorUpdate.firstName);\n  expect(response.body.lastName).to.eq(authorUpdate.lastName);\n});",
              "err": {},
              "uuid": "3011ed88-a616-4cf8-bc31-69d1aaf4abd1",
              "parentUUID": "715dd318-b37d-4549-8f14-4262e77094e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test book deletion API contract",
              "fullTitle": "API Contract Tests should test book deletion API contract",
              "timedOut": null,
              "duration": 182,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"DELETE\",\n  url: \"/books/deleteBook/1\"\n}).then(response => {\n  expect(response.status).to.eq(204);\n});",
              "err": {},
              "uuid": "68e4e6e5-6ff4-42e5-b2b2-b8feaad70bdd",
              "parentUUID": "715dd318-b37d-4549-8f14-4262e77094e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test author deletion API contract",
              "fullTitle": "API Contract Tests should test author deletion API contract",
              "timedOut": null,
              "duration": 39,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"DELETE\",\n  url: \"/author/deleteAuthor/1\"\n}).then(response => {\n  expect(response.status).to.eq(204);\n});",
              "err": {},
              "uuid": "1093d720-9cad-4b17-b396-db6710e8eafe",
              "parentUUID": "715dd318-b37d-4549-8f14-4262e77094e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test error handling for non-existent book",
              "fullTitle": "API Contract Tests should test error handling for non-existent book",
              "timedOut": null,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: \"/books/999\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(404);\n});",
              "err": {},
              "uuid": "e0fbee3c-7ed4-4c62-a481-6fa4798dcab0",
              "parentUUID": "715dd318-b37d-4549-8f14-4262e77094e9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test error handling for non-existent author",
              "fullTitle": "API Contract Tests should test error handling for non-existent author",
              "timedOut": null,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: \"/author/999\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(404);\n});",
              "err": {},
              "uuid": "8840be70-b440-4538-8b3d-ee8c61caf299",
              "parentUUID": "715dd318-b37d-4549-8f14-4262e77094e9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d48d5695-b034-43af-b474-7d51a2955351",
            "9e620d33-9471-4696-b99f-142df66c1cc3",
            "8bc80a64-9791-4dee-b4b2-25e33551ba00",
            "3011ed88-a616-4cf8-bc31-69d1aaf4abd1",
            "68e4e6e5-6ff4-42e5-b2b2-b8feaad70bdd",
            "1093d720-9cad-4b17-b396-db6710e8eafe",
            "e0fbee3c-7ed4-4c62-a481-6fa4798dcab0",
            "8840be70-b440-4538-8b3d-ee8c61caf299"
          ],
          "failures": [
            "ec52d147-bf66-46f8-95b1-5963b4fc6a39",
            "cb3efbe5-189f-43d6-870b-bfa467a49ec9"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1026,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/.jsons",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}