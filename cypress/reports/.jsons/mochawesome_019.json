{
  "stats": {
    "suites": 1,
    "tests": 14,
    "passes": 11,
    "pending": 0,
    "failures": 3,
    "start": "2025-05-02T13:42:36.752Z",
    "end": "2025-05-02T13:42:37.631Z",
    "duration": 879,
    "testsRegistered": 14,
    "passPercent": 78.57142857142857,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "73d6336c-d40d-4ff0-94f5-ad049850d1b7",
      "title": "",
      "fullFile": "cypress/e2e/api_tests.cy.js",
      "file": "cypress/e2e/api_tests.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "07bc7747-620a-4b4d-b709-27bd1cb585a1",
          "title": "API Contract Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should verify book API contract",
              "fullTitle": "API Contract Tests should verify book API contract",
              "timedOut": null,
              "duration": 213,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Testing the main books endpoint\ncy.request(\"/books\").then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.be.an(\"array\");\n  if (response.body.length > 0) {\n    const book = response.body[0];\n    // Check book data structure\n    expect(book).to.have.property(\"id\");\n    expect(book).to.have.property(\"name\");\n    expect(book).to.have.property(\"author\");\n    // Type validations\n    expect(book.id).to.be.a(\"number\");\n    describe(\"Library Management System\", () => {\n      beforeEach(() => {\n        cy.visit(\"http://localhost:8080/landingPage.html\");\n        cy.intercept(\"GET\", \"/api/books\", {\n          fixture: \"books.json\"\n        }).as(\"getBooks\");\n        cy.intercept(\"GET\", \"/api/authors\", {\n          fixture: \"authors.json\"\n        }).as(\"getAuthors\");\n        cy.intercept(\"POST\", \"/api/books\", {}).as(\"addBook\");\n        cy.intercept(\"POST\", \"/api/authors\", {}).as(\"addAuthor\");\n        cy.intercept(\"PUT\", \"/api/books/*\", {}).as(\"updateBook\");\n        cy.intercept(\"PUT\", \"/api/authors/*\", {}).as(\"updateAuthor\");\n        cy.intercept(\"DELETE\", \"/api/books/*\", {}).as(\"deleteBook\");\n        cy.intercept(\"DELETE\", \"/api/authors/*\", {}).as(\"deleteAuthor\");\n      });\n      it(\"should load the landing page\", () => {\n        cy.visit(\"/landingPage.html\");\n        cy.get(\"h1\").should(\"contain\", \"Strona startowa do Spring Boot REST Api\");\n        cy.get(\"h2\").should(\"contain\", \"System biblioteczny\");\n        cy.get(\".funkcje\").should(\"be.visible\");\n      });\n      it(\"should navigate between pages\", () => {\n        cy.visit(\"/landingPage.html\");\n        // Navigate to books page\n        cy.get('a[href=\"ksiazki.html\"]').click();\n        cy.url().should(\"include\", \"/ksiazki.html\");\n        cy.get(\"h1\").should(\"contain\", \"Wszystkie Książki\");\n        // Navigate to authors page\n        cy.get('a[href=\"autorzy.html\"]').click();\n        cy.url().should(\"include\", \"/autorzy.html\");\n        cy.get(\"h1\").should(\"contain\", \"Wszyscy autorzy\");\n        // Navigate back to landing page\n        cy.get(\".start-page\").click();\n        cy.url().should(\"include\", \"/landingPage.html\");\n      });\n      describe(\"Book Management\", () => {\n        it(\"should load books page with table\", () => {\n          cy.visit(\"/ksiazki.html\");\n          cy.get(\".output-table\").should(\"be.visible\");\n          cy.get(\"thead\").should(\"contain\", \"Tytuł\");\n          cy.get(\"thead\").should(\"contain\", \"Id ksiązki\");\n        });\n        it(\"should load book details page\", () => {\n          cy.visit(\"/ksiazkiDetailed.html\");\n          cy.get(\"select.book-id\").should(\"be.visible\");\n          cy.get(\"button.check\").should(\"be.visible\");\n          cy.get(\".output-table\").should(\"be.visible\");\n        });\n        it(\"should validate add book form\", () => {\n          cy.visit(\"/dodajKsiazke.html\");\n          // Submit without required fields\n          cy.get(\"button.Add\").click();\n          cy.url().should(\"include\", \"/dodajKsiazke.html\");\n          // Fill required fields and submit\n          cy.get(\"input.title\").type(\"Test Book Title\");\n          cy.get(\"select.author-id\").select(1);\n          cy.get(\"button.Add\").click();\n          cy.get(\".added\").should(\"not.have.class\", \"invis\").and(\"contain\", \"Dodano ksiązkę\");\n        });\n        it(\"should test book update functionality\", () => {\n          cy.visit(\"/zaktualizujKsiazke.html\");\n          // Select book and update fields\n          cy.get(\"select.book-id\").select(1);\n          cy.get(\"input.title\").type(\"Updated Book Title\");\n          cy.get(\"input.author-id\").type(\"1\");\n          // Submit and check update message\n          cy.get('button[type=\"submit\"]').click();\n          cy.get(\".updated\").should(\"not.have.class\", \"invis\");\n        });\n        it(\"should test book deletion\", () => {\n          cy.visit(\"/usunKsiazke.html\");\n          // Select book and delete\n          cy.get(\"select.book-id\").select(1);\n          cy.get('button[type=\"submit\"]').click();\n          cy.get(\".deleted\").should(\"not.have.class\", \"invis\");\n        });\n      });\n      describe(\"Author Management\", () => {\n        it(\"should load authors page with table\", () => {\n          cy.visit(\"/autorzy.html\");\n          cy.get(\".output-table\").should(\"be.visible\");\n          cy.get(\"thead\").should(\"contain\", \"Imie\");\n          cy.get(\"thead\").should(\"contain\", \"Nazwisko\");\n          cy.get(\"thead\").should(\"contain\", \"Id autora\");\n        });\n        it(\"should load author details page\", () => {\n          cy.visit(\"/autorzyDetailed.html\");\n          cy.get(\"select.author-id\").should(\"be.visible\");\n          cy.get(\"button.check\").should(\"be.visible\");\n          cy.get(\".output-table\").should(\"be.visible\");\n        });\n        it(\"should validate add author form\", () => {\n          cy.visit(\"/dodajAutora.html\");\n          // Submit without required fields\n          cy.get(\"button.Add\").click();\n          cy.url().should(\"include\", \"/dodajAutora.html\");\n          // Fill required fields and submit\n          cy.get(\"input.firstName\").type(\"Test\");\n          cy.get(\"input.lastName\").type(\"Author\");\n          cy.get(\"button.Add\").click();\n          cy.get(\".added\").should(\"not.have.class\", \"invis\").and(\"contain\", \"Dodano autora\");\n        });\n        it(\"should test author update functionality\", () => {\n          cy.visit(\"/zaktualizujAutora.html\");\n          // Select author and update fields\n          cy.get(\"select.author-id\").select(1);\n          cy.get(\"input.firstName\").type(\"Updated\");\n          cy.get(\"input.lastName\").type(\"AuthorName\");\n          // Submit and check update message\n          cy.get('button[type=\"submit\"]').click();\n          cy.get(\".updated\").should(\"not.have.class\", \"invis\");\n        });\n        it(\"should test author deletion\", () => {\n          cy.visit(\"/usunAutora.html\");\n          // Select author and delete\n          cy.get(\"select.author-id\").select(1);\n          cy.get('button[type=\"submit\"]').click();\n          cy.get(\".deleted\").should(\"not.have.class\", \"invis\");\n        });\n      });\n      describe(\"UI Elements Visibility\", () => {\n        it(\"should ensure all navigation buttons are visible\", () => {\n          cy.visit(\"/landingPage.html\");\n          cy.get(\"nav table\").should(\"be.visible\");\n          cy.get(\"nav a\").should(\"have.length\", 11);\n          cy.get(\"nav a\").each($a => {\n            cy.wrap($a).should(\"be.visible\");\n          });\n        });\n        it(\"should verify form elements are accessible\", () => {\n          // Check add book form\n          cy.visit(\"/dodajKsiazke.html\");\n          cy.get(\"input.title\").should(\"be.visible\").and(\"be.enabled\");\n          cy.get(\"select.author-id\").should(\"be.visible\").and(\"be.enabled\");\n          cy.get(\"button.Add\").should(\"be.visible\").and(\"be.enabled\");\n          // Check add author form\n          cy.visit(\"/dodajAutora.html\");\n          cy.get(\"input.firstName\").should(\"be.visible\").and(\"be.enabled\");\n          cy.get(\"input.lastName\").should(\"be.visible\").and(\"be.enabled\");\n          cy.get(\"button.Add\").should(\"be.visible\").and(\"be.enabled\");\n        });\n        it(\"should check for visual bugs in tables\", () => {\n          cy.visit(\"/ksiazki.html\");\n          cy.get(\".output-table\").should(\"be.visible\");\n          cy.get(\"thead td\").should(\"have.length\", 3);\n          cy.visit(\"/autorzy.html\");\n          cy.get(\".output-table\").should(\"be.visible\");\n          cy.get(\"thead td\").should(\"have.length\", 4);\n        });\n      });\n    });\n    expect(book.name).to.be.a(\"string\");\n    expect(book.author).to.be.an(\"object\");\n    // Check for author_id in book's author object\n    expect(book.author).to.have.property(\"author_id\");\n  }\n});\n// Testing the book details endpoint\ncy.request(\"/books/1/details\").then(response => {\n  expect(response.status).to.eq(200);\n  const bookDetails = response.body;\n  // Check book details structure - this matches your BookDTO\n  expect(bookDetails).to.have.property(\"id\");\n  expect(bookDetails).to.have.property(\"name\");\n  expect(bookDetails).to.have.property(\"author\");\n  // Check author structure in book details - this matches your AuthorDTO inside BookDTO\n  expect(bookDetails.author).to.have.property(\"id\"); // This is correct as your AuthorDTO uses 'id'\n  expect(bookDetails.author).to.have.property(\"firstName\");\n  expect(bookDetails.author).to.have.property(\"lastName\");\n});",
              "err": {
                "message": "CypressError: `cy.request()` failed on:\n\nhttp://localhost:8080/books/1/details\n\nThe response we received from your web server was:\n\n  > 404: Not Found\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: GET\nURL: http://localhost:8080/books/1/details\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/14.3.2 Chrome/130.0.6723.137 Electron/33.2.1 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\"\n}\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 404 - Not Found\nHeaders: {\n  \"vary\": \"Origin, Access-Control-Request-Method, Access-Control-Request-Headers\",\n  \"content-length\": \"0\",\n  \"date\": \"Fri, 02 May 2025 13:42:36 GMT\",\n  \"keep-alive\": \"timeout=60\",\n  \"connection\": \"keep-alive\"\n}\nBody: \n\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` failed on:\n\nhttp://localhost:8080/books/1/details\n\nThe response we received from your web server was:\n\n  > 404: Not Found\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: GET\nURL: http://localhost:8080/books/1/details\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/14.3.2 Chrome/130.0.6723.137 Electron/33.2.1 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\"\n}\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 404 - Not Found\nHeaders: {\n  \"vary\": \"Origin, Access-Control-Request-Method, Access-Control-Request-Headers\",\n  \"content-length\": \"0\",\n  \"date\": \"Fri, 02 May 2025 13:42:36 GMT\",\n  \"keep-alive\": \"timeout=60\",\n  \"connection\": \"keep-alive\"\n}\nBody: \n\n\nhttps://on.cypress.io/request\n    at <unknown> (http://localhost:8080/__cypress/runner/cypress_runner.js:134979:72)\n    at tryCatcher (http://localhost:8080/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise._settlePromiseFromHandler (http://localhost:8080/__cypress/runner/cypress_runner.js:1489:31)\n    at Promise._settlePromise (http://localhost:8080/__cypress/runner/cypress_runner.js:1546:18)\n    at Promise._settlePromise0 (http://localhost:8080/__cypress/runner/cypress_runner.js:1591:10)\n    at Promise._settlePromises (http://localhost:8080/__cypress/runner/cypress_runner.js:1671:18)\n    at _drainQueueStep (http://localhost:8080/__cypress/runner/cypress_runner.js:2377:12)\n    at _drainQueue (http://localhost:8080/__cypress/runner/cypress_runner.js:2370:9)\n    at Async._drainQueues (http://localhost:8080/__cypress/runner/cypress_runner.js:2386:5)\n    at Async.drainQueues (http://localhost:8080/__cypress/runner/cypress_runner.js:2256:14)\nFrom Your Spec Code:\n    at Context.eval (webpack:///./cypress/e2e/api_tests.cy.js:20:6)\n    at getRet (http://localhost:8080/__cypress/runner/cypress_runner.js:119616:20)\n    at tryCatcher (http://localhost:8080/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (http://localhost:8080/__cypress/runner/cypress_runner.js:4285:29)\n    at Context.thenFn (http://localhost:8080/__cypress/runner/cypress_runner.js:119627:66)\n    at Context.then (http://localhost:8080/__cypress/runner/cypress_runner.js:119878:21)\n    at wrapped (http://localhost:8080/__cypress/runner/cypress_runner.js:140155:19)",
                "diff": null
              },
              "uuid": "60d272bd-1b03-4005-861a-48e70e53c9f0",
              "parentUUID": "07bc7747-620a-4b4d-b709-27bd1cb585a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify author API contract",
              "fullTitle": "API Contract Tests should verify author API contract",
              "timedOut": null,
              "duration": 153,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Testing the main authors endpoint\ncy.request(\"/author\").then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.be.an(\"array\");\n  if (response.body.length > 0) {\n    const author = response.body[0];\n    // Check author data structure\n    expect(author).to.have.property(\"author_id\"); // This matches your Author model\n    expect(author).to.have.property(\"firstName\");\n    expect(author).to.have.property(\"lastName\");\n    expect(author).to.have.property(\"books\");\n    // Type validations\n    expect(author.author_id).to.be.a(\"number\");\n    expect(author.firstName).to.be.a(\"string\");\n    expect(author.lastName).to.be.a(\"string\");\n    expect(author.books).to.be.an(\"array\");\n  }\n});\n// Testing the author details endpoint\ncy.request(\"/author/1/details\").then(response => {\n  expect(response.status).to.eq(200);\n  const authorDetails = response.body;\n  // Check author details structure - this matches your AuthorDTO\n  expect(authorDetails).to.have.property(\"id\"); // Correct - your AuthorDTO uses 'id'\n  expect(authorDetails).to.have.property(\"firstName\");\n  expect(authorDetails).to.have.property(\"lastName\");\n  expect(authorDetails).to.have.property(\"books\");\n  // Check books array\n  expect(authorDetails.books).to.be.an(\"array\");\n  if (authorDetails.books.length > 0) {\n    const book = authorDetails.books[0];\n    // Check book structure in author details\n    expect(book).to.have.property(\"id\");\n    expect(book).to.have.property(\"name\");\n  }\n});",
              "err": {
                "message": "AssertionError: expected { Object (author_id, firstName, ...) } to have property 'books'",
                "estack": "AssertionError: expected { Object (author_id, firstName, ...) } to have property 'books'\n    at Context.eval (webpack:///./cypress/e2e/api_tests.cy.js:256:31)\n    at getRet (http://localhost:8080/__cypress/runner/cypress_runner.js:119616:20)\n    at tryCatcher (http://localhost:8080/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (http://localhost:8080/__cypress/runner/cypress_runner.js:4285:29)\n    at Context.thenFn (http://localhost:8080/__cypress/runner/cypress_runner.js:119627:66)\n    at Context.then (http://localhost:8080/__cypress/runner/cypress_runner.js:119878:21)",
                "diff": null
              },
              "uuid": "8a6bdfd2-59f6-4874-83f8-9772a377c836",
              "parentUUID": "07bc7747-620a-4b4d-b709-27bd1cb585a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test book addition API contract",
              "fullTitle": "API Contract Tests should test book addition API contract",
              "timedOut": null,
              "duration": 145,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const newBook = {\n  name: \"Nowa książka testowa\",\n  author_id: \"1\" // String, as expected by your controller\n};\ncy.request({\n  method: \"POST\",\n  url: \"/books/addBook\",\n  body: newBook\n}).then(response => {\n  expect(response.status).to.eq(200);\n  // Check response structure after adding a book - this matches your BookDTO response\n  expect(response.body).to.have.property(\"id\");\n  expect(response.body).to.have.property(\"name\");\n  expect(response.body).to.have.property(\"author\");\n  expect(response.body.name).to.eq(newBook.name);\n  // The author should have id, firstName and lastName\n  expect(response.body.author).to.have.property(\"id\");\n  expect(response.body.author).to.have.property(\"firstName\");\n  expect(response.body.author).to.have.property(\"lastName\");\n});",
              "err": {
                "message": "CypressError: `cy.request()` failed on:\n\nhttp://localhost:8080/books/addBook\n\nThe response we received from your web server was:\n\n  > 404: Not Found\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: POST\nURL: http://localhost:8080/books/addBook\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/14.3.2 Chrome/130.0.6723.137 Electron/33.2.1 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\",\n  \"content-type\": \"application/json\",\n  \"content-length\": 49\n}\nBody: {\"name\":\"Nowa książka testowa\",\"author_id\":\"1\"}\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 404 - Not Found\nHeaders: {\n  \"vary\": \"Origin, Access-Control-Request-Method, Access-Control-Request-Headers\",\n  \"content-length\": \"0\",\n  \"date\": \"Fri, 02 May 2025 13:42:37 GMT\",\n  \"keep-alive\": \"timeout=60\",\n  \"connection\": \"keep-alive\"\n}\n\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` failed on:\n\nhttp://localhost:8080/books/addBook\n\nThe response we received from your web server was:\n\n  > 404: Not Found\n\nThis was considered a failure because the status code was not `2xx` or `3xx`.\n\nIf you do not want status codes to cause failures pass the option: `failOnStatusCode: false`\n\n-----------------------------------------------------------\n\nThe request we sent was:\n\nMethod: POST\nURL: http://localhost:8080/books/addBook\nHeaders: {\n  \"Connection\": \"keep-alive\",\n  \"user-agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Cypress/14.3.2 Chrome/130.0.6723.137 Electron/33.2.1 Safari/537.36\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\",\n  \"content-type\": \"application/json\",\n  \"content-length\": 49\n}\nBody: {\"name\":\"Nowa książka testowa\",\"author_id\":\"1\"}\n\n-----------------------------------------------------------\n\nThe response we got was:\n\nStatus: 404 - Not Found\nHeaders: {\n  \"vary\": \"Origin, Access-Control-Request-Method, Access-Control-Request-Headers\",\n  \"content-length\": \"0\",\n  \"date\": \"Fri, 02 May 2025 13:42:37 GMT\",\n  \"keep-alive\": \"timeout=60\",\n  \"connection\": \"keep-alive\"\n}\n\n\nhttps://on.cypress.io/request\n    at <unknown> (http://localhost:8080/__cypress/runner/cypress_runner.js:134979:72)\n    at tryCatcher (http://localhost:8080/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise._settlePromiseFromHandler (http://localhost:8080/__cypress/runner/cypress_runner.js:1489:31)\n    at Promise._settlePromise (http://localhost:8080/__cypress/runner/cypress_runner.js:1546:18)\n    at Promise._settlePromise0 (http://localhost:8080/__cypress/runner/cypress_runner.js:1591:10)\n    at Promise._settlePromises (http://localhost:8080/__cypress/runner/cypress_runner.js:1671:18)\n    at _drainQueueStep (http://localhost:8080/__cypress/runner/cypress_runner.js:2377:12)\n    at _drainQueue (http://localhost:8080/__cypress/runner/cypress_runner.js:2370:9)\n    at Async._drainQueues (http://localhost:8080/__cypress/runner/cypress_runner.js:2386:5)\n    at Async.drainQueues (http://localhost:8080/__cypress/runner/cypress_runner.js:2256:14)\nFrom Your Spec Code:\n    at Context.eval (webpack:///./cypress/e2e/api_tests.cy.js:294:7)",
                "diff": null
              },
              "uuid": "ede96f51-39d5-41c3-9cdf-4e338f101982",
              "parentUUID": "07bc7747-620a-4b4d-b709-27bd1cb585a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test author addition API contract",
              "fullTitle": "API Contract Tests should test author addition API contract",
              "timedOut": null,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newAuthor = {\n  firstName: \"Nowy\",\n  lastName: \"Autor\"\n};\ncy.request({\n  method: \"POST\",\n  url: \"/author/addAuthor\",\n  body: newAuthor\n}).then(response => {\n  expect(response.status).to.eq(200);\n  // Check response structure after adding an author\n  expect(response.body).to.have.property(\"author_id\"); // Author model uses author_id\n  expect(response.body).to.have.property(\"firstName\");\n  expect(response.body).to.have.property(\"lastName\");\n  expect(response.body.firstName).to.eq(newAuthor.firstName);\n  expect(response.body.lastName).to.eq(newAuthor.lastName);\n});",
              "err": {},
              "uuid": "15d16060-b35c-4ddd-b4c8-88b0f4cf0acb",
              "parentUUID": "07bc7747-620a-4b4d-b709-27bd1cb585a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test book update API contract",
              "fullTitle": "API Contract Tests should test book update API contract",
              "timedOut": null,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const bookUpdate = {\n  name: \"Zaktualizowana książka\",\n  author: {\n    author_id: 1 // This matches your controller's expectations\n  }\n};\ncy.request({\n  method: \"PUT\",\n  url: \"/books/updateBook/1\",\n  body: bookUpdate,\n  failOnStatusCode: false\n}).then(response => {\n  if (response.status === 200) {\n    // Check response structure after updating a book\n    expect(response.body).to.have.property(\"id\");\n    expect(response.body).to.have.property(\"name\");\n    expect(response.body).to.have.property(\"author\");\n    expect(response.body.name).to.eq(bookUpdate.name);\n    // The author should have author_id\n    expect(response.body.author).to.have.property(\"author_id\");\n  } else {\n    // Handle possible 404 if book doesn't exist\n    expect(response.status).to.be.oneOf([200, 404]);\n  }\n});",
              "err": {},
              "uuid": "0a6b65b9-31ff-4da0-855c-550146887315",
              "parentUUID": "07bc7747-620a-4b4d-b709-27bd1cb585a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test author update API contract",
              "fullTitle": "API Contract Tests should test author update API contract",
              "timedOut": null,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const authorUpdate = {\n  firstName: \"Zaktualizowane\",\n  lastName: \"Nazwisko\"\n};\ncy.request({\n  method: \"PUT\",\n  url: \"/author/updateAuthor/1\",\n  body: authorUpdate,\n  failOnStatusCode: false\n}).then(response => {\n  if (response.status === 200) {\n    // Check response structure after updating an author\n    expect(response.body).to.have.property(\"author_id\");\n    expect(response.body).to.have.property(\"firstName\");\n    expect(response.body).to.have.property(\"lastName\");\n    expect(response.body.firstName).to.eq(authorUpdate.firstName);\n    expect(response.body.lastName).to.eq(authorUpdate.lastName);\n  } else {\n    // Handle possible error responses\n    expect(response.status).to.be.oneOf([200, 404, 500]);\n  }\n});",
              "err": {},
              "uuid": "4ddc0c4f-7fbc-442a-8e46-52d6ab7a90f8",
              "parentUUID": "07bc7747-620a-4b4d-b709-27bd1cb585a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test book deletion API contract",
              "fullTitle": "API Contract Tests should test book deletion API contract",
              "timedOut": null,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"DELETE\",\n  url: \"/books/deleteBook/1\",\n  failOnStatusCode: false\n}).then(response => {\n  // Should be 204 No Content if successful\n  expect(response.status).to.be.oneOf([204, 404, 500]);\n});",
              "err": {},
              "uuid": "23fa39f1-6b57-4987-abf9-26f941c739d7",
              "parentUUID": "07bc7747-620a-4b4d-b709-27bd1cb585a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test author deletion API contract",
              "fullTitle": "API Contract Tests should test author deletion API contract",
              "timedOut": null,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"DELETE\",\n  url: \"/author/deleteAuthor/1\",\n  failOnStatusCode: false\n}).then(response => {\n  // Should be 204 No Content if successful\n  expect(response.status).to.be.oneOf([204, 404, 500]);\n});",
              "err": {},
              "uuid": "889a9ac9-d403-4d05-a4ca-7a501aa4a39e",
              "parentUUID": "07bc7747-620a-4b4d-b709-27bd1cb585a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test error handling for non-existent book",
              "fullTitle": "API Contract Tests should test error handling for non-existent book",
              "timedOut": null,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: \"/books/999\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(404);\n});",
              "err": {},
              "uuid": "cbfe3aee-995a-419e-8439-6d89536c3c5b",
              "parentUUID": "07bc7747-620a-4b4d-b709-27bd1cb585a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test error handling for book details of non-existent book",
              "fullTitle": "API Contract Tests should test error handling for book details of non-existent book",
              "timedOut": null,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: \"/books/999/details\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(404);\n});",
              "err": {},
              "uuid": "f520bb24-9294-40a3-9347-cad61a0ee122",
              "parentUUID": "07bc7747-620a-4b4d-b709-27bd1cb585a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test error handling for non-existent author",
              "fullTitle": "API Contract Tests should test error handling for non-existent author",
              "timedOut": null,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: \"/author/999\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(404);\n});",
              "err": {},
              "uuid": "29ce6cd6-1dd2-475a-84a9-5cc55d464f7f",
              "parentUUID": "07bc7747-620a-4b4d-b709-27bd1cb585a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test error handling for author details of non-existent author",
              "fullTitle": "API Contract Tests should test error handling for author details of non-existent author",
              "timedOut": null,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: \"/author/999/details\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(404);\n});",
              "err": {},
              "uuid": "bd5e4954-2159-417c-8071-32f1110f98b9",
              "parentUUID": "07bc7747-620a-4b4d-b709-27bd1cb585a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test the single book retrieval endpoint",
              "fullTitle": "API Contract Tests should test the single book retrieval endpoint",
              "timedOut": null,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: \"/books/1\",\n  failOnStatusCode: false\n}).then(response => {\n  if (response.status === 200) {\n    // The structure is Optional<Book> wrapped in ResponseEntity\n    expect(response.body).to.have.property(\"present\");\n    if (response.body.present) {\n      expect(response.body).to.have.property(\"value\");\n      const book = response.body.value;\n      expect(book).to.have.property(\"id\");\n      expect(book).to.have.property(\"name\");\n      expect(book).to.have.property(\"author\");\n      expect(book.author).to.have.property(\"author_id\");\n    }\n  } else {\n    expect(response.status).to.eq(404);\n  }\n});",
              "err": {},
              "uuid": "87caf9ca-4f29-48ea-830f-ada3ce81bbe8",
              "parentUUID": "07bc7747-620a-4b4d-b709-27bd1cb585a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test the single author retrieval endpoint",
              "fullTitle": "API Contract Tests should test the single author retrieval endpoint",
              "timedOut": null,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: \"/author/1\",\n  failOnStatusCode: false\n}).then(response => {\n  if (response.status === 200) {\n    // The structure is Optional<Author> wrapped in ResponseEntity\n    expect(response.body).to.have.property(\"present\");\n    if (response.body.present) {\n      expect(response.body).to.have.property(\"value\");\n      const author = response.body.value;\n      expect(author).to.have.property(\"author_id\");\n      expect(author).to.have.property(\"firstName\");\n      expect(author).to.have.property(\"lastName\");\n      expect(author).to.have.property(\"books\");\n    }\n  } else {\n    expect(response.status).to.eq(404);\n  }\n});",
              "err": {},
              "uuid": "50ab7f6d-c1bd-4065-98a8-578e6b5ab263",
              "parentUUID": "07bc7747-620a-4b4d-b709-27bd1cb585a1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "15d16060-b35c-4ddd-b4c8-88b0f4cf0acb",
            "0a6b65b9-31ff-4da0-855c-550146887315",
            "4ddc0c4f-7fbc-442a-8e46-52d6ab7a90f8",
            "23fa39f1-6b57-4987-abf9-26f941c739d7",
            "889a9ac9-d403-4d05-a4ca-7a501aa4a39e",
            "cbfe3aee-995a-419e-8439-6d89536c3c5b",
            "f520bb24-9294-40a3-9347-cad61a0ee122",
            "29ce6cd6-1dd2-475a-84a9-5cc55d464f7f",
            "bd5e4954-2159-417c-8071-32f1110f98b9",
            "87caf9ca-4f29-48ea-830f-ada3ce81bbe8",
            "50ab7f6d-c1bd-4065-98a8-578e6b5ab263"
          ],
          "failures": [
            "60d272bd-1b03-4005-861a-48e70e53c9f0",
            "8a6bdfd2-59f6-4874-83f8-9772a377c836",
            "ede96f51-39d5-41c3-9cdf-4e338f101982"
          ],
          "pending": [],
          "skipped": [],
          "duration": 749,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/.jsons",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}